-------------------------------------------------
CHAPTER 10 - PROCESSES
-------------------------------------------------

- Processes

    - Modern operating systems are multitasking, meaning they create the illusion of doing more than one
        thing at once by rapidly switching from one executing program to another.


    - When a system starts up, the kernel initiates a few of its own activities as processes and launches
        a program called 'init'.  'init' then rungs a series of shell scripts (located in '/etc') called
        init scripts, which start all the system services.  Many of these services are implemented as
        daemon programs, which just sit in the back and do their work without having any user interface.


    - The fact that a program can launch other programs is expressed in the process scheme as a 'parent
        process' producing a 'child process'.


    - The kernel maintains information about each process to help keep things organized.  For example,
        each process is assigned a number called a 'Process Id' (PID).  PIDs are assigned in ascending
        order, with 'init' always getting PID 1.  The kernel also keeps track of the memory assigned
        to each process, as well as the process's readiness to resume execution.  Like files, processes
        have owners and user ids, effective user ids, etc.



- Viewing Processes

    - The 'ps' command shows us the processes associated with the current terminal session.


        # Show processes associated to current terminal session
        $ ps

        PID   TTY          TIME CMD 
        5198  pts/1    00:00:00 bash
        10129 pts/1    00:00:00 ps


        TTY (Short for 'teletype') shows us the 'controlling terminal' for the process.
        TIME shows us the amount of CPU time consumed by the process.


    - Adding the 'x' option tells 'ps' to show all of our processes regardless of what terminal (if any)
        they are controlled by.


        # Show all processes
        $ ps x

         PID   TTY      STAT   TIME COMMAND 
         2799  ?        Ssl    0:00 /usr/libexec/bonobo-activation-server –ac 
         2820  ?        Sl     0:01 /usr/libexec/evolution-data-server-1.10 --
         15647 ?        Ss     0:00 /bin/sh /usr/bin/startkde
         ....


         A new column names STAT has been added to the output.  It is short for 'state' and reveals the
           current state of the process.



- Process States

    State             Meaning
    -------------------------------------------------------------------------------
    R                 Running. This means that the process is running or ready to run.

    S                 Sleeping. The process is not running; rather, it is waiting for an event, such 
                        as a keystroke or network packet.

    D                 Uninterruptible sleep. The process is waiting for I/O such as a disk drive.

    T                 Stopped. The process has been instructed to stop.

    Z                 A defunct or “zombie” process. This is a child process that has terminated but 
                        has not been cleaned up by its parent.

    <                 A high-priority process. It's possible to grant more importance to a process, 
                        giving it more time on the CPU. This property of a process is called niceness. A
                        process with high priority is said to be less nicebecause it's taking more of the
                        CPU's time, which leaves less for everybody else.

    N                 A low-priority process. A process with low priority (a “nice” process) will get
                        processor time only after other processes with higher priority have been serviced.



- The 'ps aux' Command

    - The 'ps aux' command displays the processes belonging to every user.  


        # Display processes for every user
        $ ps aux

        USER    PID   %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
        root      1    0.0  0.0   2136   644 ?        Ss   Mar05   0:31 init
        root      2    0.0  0.0      0     0 ?        S<   Mar05   0:00 [kt]
        root      3    0.0  0.0      0     0 ?        S<   Mar05   0:00 [mi]
        root      4    0.0  0.0      0     0 ?        S<   Mar05   0:00 [ks]
        root      5    0.0  0.0      0     0 ?        S<   Mar05   0:06 [wa]
        root      6    0.0  0.0      0     0 ?        S<   Mar05   0:36 [ev]
        root      7    0.0  0.0      0     0 ?        S<   Mar05   0:00 [kh]
        ...


        USER   is the user id that owns the process
        %CPU   is the CPU usage
        %MEM   is the memory usage
        VSZ    is the virtual memory size
        RSS    is the resident set size (amount of physical RAM in KB)
        START  is the time when the 



- The 'top' Command

    - While the 'ps' command can reveal a lot about what the machine is doing, it provides only a
        snapshot of the machine's state at the moment the 'ps' command is executed.  The 'top' command
        provides a more dynamic view of the machine's activity.


      # Display a continuously updating (every 3s by default) view of processes
      $ top

      PID    USER    PR   NI   VIRT   RES   SHR  S  %CPU  %MEM     TIME+    COMMAND 
      6244   me      39   19  31752  3124  2188  S   6.3   1.0   16:24.42   trackerd
      11071  me      20    0   2304  1092   840  R   1.3   0.3    0:00.14   top



- Controlling Processes

    - First, we'll start the 'xlogo' test program that just displays the XWindows logo in a new window.
        If we can resize the window and the image resizes, the program is running.

        # Start test program
        $ xlogo


    - Notice that our shell prompt has not returned.  This is because the shell is waiting for the 
        program to finish.  To interrupt the process, we can return to the window and use the 'Cntl-C'
        command to terminate the process.


    - We can run a process in the background using the '&' character.  

        # Start program in the background
        $ xlogo &


    - To return the process to the foreground, the 'fg' command is used:

        # Return the first background process to the foreground
        $ fg %1


    - Sometimes, we want to stop a process without terminating it.  To stop a foreground process and
        place it in the background, we can use 'Cntl-Z'.

        # Now, we can either continue execution in the foreground or restart execution in the background
        $ fg %1
        $ bg %1



- Signals

    - The 'kill' command can be used to kill processes.  

        # Launch the application
        $ xlogo &
        [1] 28401


        # Kill the process
        $ kill 28401


    - Actually, the 'kill' command doesn't exactly kill processes.  Rather, it sends them signals.  
        Signals are one way that the operating system communicates with programs.  

      For instance, when we use 'Cntl-c', a signal called 'INT' (interrupt) is sent.  When we use 'Cntl-z',
        a signal called 'TSTP' (terminal stop) is sent.  Programs, in turn, listen for signals and may
        act upon them as they are received.



- Sending Signals to Process with 'kill'

    - The 'kill' command is used to send signals to programs.  

        # kill Syntax
        $ kill [-signal] PID...


      If no signal is specified, the TERM signal is sent by default.


    - Here are the most common signals:

        Number    Name     Meaning
        ------------------------------------------------------------------------------
        1         HUP      Hangup. This is a vestige of the good old days when terminals were attached to
                             remote computers with phone lines and modems. The signal is used to indicate 
                             to programs that the controlling terminal has “hung up.” The effect of this
                             signal can be demonstrated by closing a terminal session. The foreground
                             program running on the terminal will be sent the signal and will terminate.
                             This signal is also used by many daemon programs to cause a reinitialization.
                             This means that when a daemon is sent this signal, it will restart and 
                             reread its configuration file. The Apache web server is an example of a daemon
                             that uses the HUP signal in this way.

        2         INT      Interrupt. This performs the same function as a Ctrl-c sent from the terminal. 
                             It will usually terminate a program.

        9         KILL     Kill. This signal is special. Whereas programs may choose to handle signals sent
                             to them in different ways, including ignoring them all together, the KILL
                             signal is never actually sent to the target program. Rather, the kernel 
                             immediately terminates the process. When a process is terminated in this
                             manner, it is given no opportunity to “clean up” after itself or save its work.
                             For this reason, the KILL signal should be used only as a last resort when 
                             other termination signals fail.

        15        TERM     Terminate. This is the default signal sent by the kill command. If a program is
                             still “alive” enough to receive signals, it will terminate.

        18        CONT     Continue. This will restore a process after a STOPor TSTP signal. This signal 
                             is sent by the bg and fg commands.

        19        STOP     Stop. This signal causes a process to pause without terminating. Like the KILL
                             signal, it is not sent to the target process, and thus it cannot beignored.

        20        TSTP     Terminal stop. This is the signal sent by the terminal when Ctrl-z is pressed.
                             Unlike the STOP signal, the TSTP signal is received by the program, but the
                             program may choose to ignore it.


    - kill Examples:

        # Use the signal number
        $ kill -1 13456


        # Use the signal name
        $ kill -INT 13601


        # The signal name can also be prefaced with 'SIG'
        $ kill -SIGINT 13601



- Other Common Signals

    - In addition to the list of signals above, which are most often used with 'kill', there are other
        signals frequently used by the system.


        Number    Name     Meaning
        ------------------------------------------------------------------------------
        3         QUIT     Quit.

        11        SEGV     Segmentation violation. This signal is sent if a program makes illegal use of
                             memory, that is, if ittried to write somewhere it was not allowed to write.

        28        WINCH    Window change. This is the signal sent by the system when a window changes 
                             size. Some programs, such as top and less will respond to this signal by 
                             redrawing themselves to fit the new window dimensions.



- Sending Signals to Multiple Processes with 'killall'

    - It's also possible to send signals to multiple processes matching a specifed program or username
        by using the 'killall' command.


        # killall Syntax
        $ killall [-u user] [-signal] name...


    - Example

        # Start 2 instances of a program
        $ xlogo &
        $ xlogo &


        # Kill both instances
        $ killall xlogo

        [1]-  Terminated              xlogo
        [2]+  Terminated              xlogo



- Shutting Down the System

    - The process of shutting down the system involves the orderly termination of all the processes on
        the system, as well as some vital housekeeping chores (like syncing all of the mounted file
        systems) before the system powers off.  

      There are 4 commands that can perform this function:

        1. halt
        2. poweroff
        3. reboot
        4. shutdown


    - Examples

        # Reboot the system
        $ sudo reboot


        # Shut down and specify a time delay
        $ sudo shutdown -h now


        # Reboot and specify a time delay
        $ sudo shutdown -r now



- More Process-Related Commands

    - pstree

        The 'pstree' command outputs a process list arranged in a tree-like pattern showing the 
          parent-child relationships between processes.


    - vmstat

        The 'vmstat' command outputs a snapshot of system resource usage, including memory, swap, and
          disk I/O.  To see a continuous display, follow the command with a time delay for updates
          (ie 'vmstat 5').


    - xload

        The 'xload' command is a graphical program that draws a graph showing load over time.


    - tload

        The 'tload' command is similar to the 'xload' program but draws the graph in the terminal.
          Terminate the output with 'Cntl-c'.
----------------------------------------------------
CHAPTER 9 - PERMISSIONS
----------------------------------------------------

- Multi-User System

    - Unix has a history of being a multi-user system, which means that more than one person can be using
        the computer at the same time.  For example, if a computer is connected to a network, remote
        users can log in via ssh and operate the computer.  

    - In fact, remote users can even execute graphical applications and have the graphical output appear
        on a remote display.  The XWindow system supports this as part of its basic design.  

    - This is due to the environment in which Unix was created, where computers were large, expensive,
        and centralized.  For instance, a typical university system consisted of a large central computer
        located in one building and terminals that were located throughout the campus.

    - To make this practical, a method had to be devised to protect the users from each other.



- Owners, Group Members, and Everyone Else

    - In the Unix security model, users may own files and directories.  When a user owns a file or
        directory, the user has control over its access.  Users can, in turn, belong to a group consisting
        of one or more users who are given access to files and directories by their owners.  

    - In addition to granting access to a group, an owner may also grant some sort of access rights to 
        everybody, which in Unix terms is referred to as 'the world'.


    - To find out information about your identity, use the 'id' command:

        # Get information about your user id and groups
        $ id

        uid=500(me) gid=500(me) groups=500(me)


    - When user accounts are created, users are assigned a number (a 'uid'), which is then, for the sake
        of humans, mapped to a username.  The user is assigned a primary group id (a 'gid') and may 
        belong to additional groups.  


    - User accounts are defined in the '/etc/passwd' file and groups are defined in the '/etc/group' file.
        When user accounts and groups are created, these files are modified along with '/etc/shadow' which
        holds information about the user's password.  

      For each user account, '/etc/passwd' defines the username, uid, gid, account's real name, and login
        shell.  



- Reading, Writing, and Executing

    - When we use 'ls -l', we see the line starts with 10 letters:

        -rw-rw-r--

      
    - The first character is the file type.  It can be:

        -    A regular file
        d    A directory
        l    A sym link
        c    A character special file (handles data as a stream of bytes, like terminal or /dev/null)
        b    A block special file (handles data in blocks, such as a hard drive or dvd drive)


    - The next 9 characters are:

        Owner rwx
        Group rwx
        World rwxl


    - Note that 'x' allows files to be treated as a program and executed.  Program files written in
        scripting languages must also be set as readable to be executed.



- The 'chmod' Command

    - The 'chmod' command is used to change the permissions of a file or directory.  'chmod' supports
        2 distinct ways of specifying mode changes: octal representation or symbolic representation.


    - File Modes in Octal

        Octal    Binary    File Mode
        --------------------------------
        0        000       ---
        1        001       --x
        2        010       -w-
        3        011       -wx
        4        100       r--
        5        101       r-x
        6        110       rw-
        7        111       rwx


    - chmod Symbolic Notation

        Symbol    Meaning
        --------------------------------------------------------------------------
        u         Short for “user” but means the file or directory owner.
        g         Group owner.
        o         Short for “others” but means world.
        a         Short for “all.” This is the combination of “u”, “g”, and “o”.


    - chmod Examples

        # Add read permissions for owner and group
        $ chmod 600 foo.txt

        # Add execute permission for the owner
        $ chmod u+x foo.txt

        # Remove execute permission from the owner
        $ chmod u-x foo.txt

        # Add execute permissions for the owner, group, and world
        $ chmod +x foo.txt

        # Remove read and write permissions for anyone besides the owner and group owner
        $ chmod o-rw foo.txt



- The 'umask' Command

    - The 'umask' command controls the default permissions given to a file when it is created.  It
        uses octal notation to express a 'mask' of bits to be removed from the file's mode attributes.

        $ umask
        0002

        # Create file
        $ > foo.txt

        # Attributes of new file (world gets only read permission)
        $ ls -l foo.txt
        -rw-rw-r--

        [Original File Mode    --- rw- rw- rw-]
        [Mask                  000 000 000 010]
        [Result                --- rw- rw- r--]


        # Now, set the umask manually
        $ umask 0000

        # Create another file
        $ > bar.txt

        # Attributes of new file (world now gets write permission)
        $ ls -l bar.txt
        -rw-rw-rw-

        [Original File Mode    --- rw- rw- rw-]
        [Mask                  000 000 000 000]
        [Result                --- rw- rw- rw-]


    - Basically, everywhere 1 appears in the binary mask, an attribute was removed.  'umask 0022' is
        also commonly used, which will set new files to '--- rw- r-- r--'.


    - The first digit of the 4-digit number contains some special permissions.  

        1. The 'setuid bit' (octal 4000)

             - When applied to an executable file, it sets the 'effective user ID' from that of the
                 real user to that of the program's owner.  This is given to a few programs owned
                 by the superuser.

             - When an ordinary user runs a program that is 'setuid root', the program runs with the
                 effective privileges of the superuser.  This allows the program to access files and
                 directories that an ordinary user would normally be prohibited from accessing.
                 Because this raises security concerns, the number of 'setuid' programs must be held to
                 an absolute minimum.


        2. The 'setgid bit' (octal 2000)

             - The 'setgid bit' changes the effective group ID from the real group ID to that of the file
                 owner.  If the 'setgid' bit is set on a directory, newly created files in the directory
                 will be given the group ownership of the directory rather than the group ownership
                 of the file's creator.

             - This is useful in a shared directory when members of a common group need access to all
                 the files in a directory, regardless of the file owner's primary group.


        3. The 'sticky bit' (octal 1000)

             - This is a holdover from ancient Unix, where it was possible to mark an executable file as
                 'not swappable'.  On files, Linux ignores the sticky bit, but if applied to a directory,
                 it prevents users from deleting or renaming files unless the user is either the owner
                 of the directory, the owner of the file, or the superuser.

             - This is often used to control access to a shared directory, such as '/tmp'.


        Examples:

        # Assign a setuid to a program
        $ chmod u+s program

        $ ls -l program
        -rwsr-xr-x


        # Assign a setgid to a directory
        $ chmod g+s dir

        $ ls -l dir
        drwxrwsr-x


        # Assign the sticky bit to a directory
        $ chmod +t dir

        $ ls -l dir
        drwxrwxrwt



- Changing Identities

    - At various times, we may find it necessary to take on the identity of another user.  Often, we want
        to gain superuser privileges to carry out some administrative task.  It is also possible to 
        'become' a regular user for things like testing an account.


    - There are 3 ways to take on an alternate identity:

        1. Log out and log back in as the alternate user
        2. Use the 'su' commmand
        3. Use the 'sudo' command


    - The 'su' command allows us to assume the identity of a another user and either start a new shell
        session with that user's ID, or to issue a single command as that user.


    - The 'sudo' command allows an admin to set up a configuration file called '/etc/sudoers' and define
        specific commands that particular users are permitted to execute under an assumed identity.



- The 'su' Command

    - The 'su' command is used to start a shell as another user.  

        # Command syntax
        su [-[l]] [user]


        # Start a shell for the superuser
        $ su -

        # If we enter the password successfully, we'll get a # for the prompt


        # Return to the previous shell
        $ exit


    - It's also possible to execute a single command rather than starting a new interactive session.

        # Execute a single command
        $ su -c 'command'


        # Example
        $ su -c 'ls -l /root/*'



- The 'sudo' Command

    - The 'sudo' command is like 'su' in many ways but also has some additional important capabilities.
        The administrator can configure 'sudo' to allow an ordinary user to execute commands as a
        different user (usually the superuser) in a controlled way.  In particular, a user may be 
        restricted to one or more specific commands.


    - Another important difference is that 'sudo' does not require access to the superuser's password.
        Authenticating using 'sudo' just requires the user's own password.  


        # Run a script as sudo
        $ sudo backup_script


        # List the privileges granted by sudo
        $ sudo -l



- Ubuntu and sudo

    - There has always been a larger division between users and administrators in Unix than in Windows,
        due to the multiuser heritage of Unix.  Since having a 'root' account is traditional in Unix,
        most users would 'su' to the root user to complete administrative tasks.  


    - Since many people were tired of getting the 'permission denied' messages, a lot of them started
        just running as the 'root' user all the time.  This led to reduced security.


    - When Ubuntu was introduced, its creators took a different tack.  By default, Ubuntu disables logins
        to the 'root' account (by failing to set a password for the account) and instead uses 'sudo'
        to grant superuser privileges.  The initial user account is granted full access to superuser
        privileges via 'sudo' and may grant similar powers to subsequent user accounts.



- The 'chown' Command

    - The 'chown' command is used to change the owner and group owner of a file or directory.  Superuser
        privileges are required for this command.  


        # chown Syntax
        chown [owner][:[group]] file...


    - chown Argument Examples

        Argument          Results
        --------------------------------------------------------------------------------------
        bob               Changes the ownership of the file from its current owner to user bob.

        bob:users         Changes the ownership of the file from its current owner to user bob and 
                            changes the file group owner to group users.

        :admins           Changes the group owner to the group admins. The file owner is unchanged.

        bob:              Changes the file owner from the current owner to user bob and changes the 
                            group owner to the login group of user bob.


    - chown Example

        Let's say we have 2 users, 'janet' who has access to superuser privileges, and 'tony' who does
          not.  janet wants to copy a file from her home directory to the home directory of user tony,
          and wants tony to be able to edit the file.


        # janet moves the file to tony's home directory
        [janet@linuxbox ~]$ sudo cp myfile.txt ~tony
        Password:


        # Now, the file is owned by 'root' since janet used sudo
        [janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt 
        -rw-r--r-- 1 root  root  root 2018-03-20 14:30 /home/tony/myfile.txt


        # janet changes the owner to tony so he can edit the file
        [janet@linuxbox ~]$ sudo chown tony: ~tony/myfile.txt


        # tony is now the owner
        [janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt 
        -rw-r--r-- 1 tony  tony  tony 2018-03-20 14:30 /home/tony/myfile.txt



- The 'chgrp' Command

    - In older versions of Unix, the 'chown' command was only used to change file ownership, not group
        ownership.  The 'chgrp' command was used instead to change group ownership.



- Changing Your Password

    - To set or change a password, the 'passwd' command is used.

        # passwd Syntax
        passwd [user]


      To change your password, you'll be prompted for your old password and new password.  


    - The 'passwd' command will try to enforce use of 'strong' passwords.  This means it will refuse
        to accept passwords that are too short, too similar to previous passwords, are dictionary words,
        or are too easily guessed.


    - If you have superuser privileges, you can specify a username as an argument to the 'passwd' command
        to set the password for another user.
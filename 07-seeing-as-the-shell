----------------------------------------------------
CHAPTER 7 - SEEING THE WORLD AS THE SHELL SEES IT
----------------------------------------------------

- Expansion

    - Each time we type a command and press the 'Enter' key, bash performs several substitutions upon
        the text before it carries out our command.  This process is called 'expansion'.


    - To demonstrate how this works, we look at the 'echo' command.  'echo' is a shell built-in that 
        just prints its text arguments on stdout.


      # Print 'this is a test'
      $ echo this is a test


      # Print the files in the directory
      $ echo *


      The shell expands the '*' into the list of files in the directory before the 'echo' command is
        executed.



- Pathname Expansion

    The mechanism by which wildcards work is called 'pathname expansion'.  


      $ ls
      Desktop    ls-output.txt  Pictures  Templates
      Documents  Music          Public    Videos


      $ echo D*
      Desktop Documents


      $ echo *s
      Documents Pictures Templates Videos


      $ echo [[:upper:]]*
      Desktop Documents Music Pictures Public Templates Videos


      $ echo /usr/*/share
      /usr/kerberos/share /usr/local/share



- Tilde Expansion

    When the tilde character is used as the beginning of a word, it expands into the name of the
      home directory of the named user (or the home directory of the current user is no user is
      specified).


      # Home directory of current user
      $ echo ~
      /home/me


      # Home directory of another user
      $ echo ~foo
      /home/foo



- Arithmetic Expansion

    The shell allows arithmetic to be performed by expansion.  This allows us to use the shell prompt
      as a calculator.


      # Arithmetic expansion uses the following form
      $ $((expression))


      # Example
      $ echo $((2 + 2))


    - Arithmetic Operators

        +  -  *  /  %  **


      # More complex example
      $ echo Five divided by two equals $((5/2)) with $((5%2)) left over.

      Five divided by two equals 2 with 1 left over.



- Brace Expansion

    With brace expansion, we can create multiple text strings from a pattern.


    # Create 3 different strings
    $ echo Front-{A, B, C}-Back
    Front-A-Back  Front-B-Back  Front-C-Back


    # Create 5 different strings
    $ echo Number_{1..5}
    Number_1 Number_2 Number_3 Number_4 Number_5


    # Pad numbers with zeros
    $ echo {01..15}
    01 02 03 04 05 06 07 08 09 10 11 12 13 14 15


    # Pad numbers with 2 zeros
    $ echo {001..15}
    001 002 003 004 005 006 007 008 009 010 011 012 013 014 015


    # Letters in reverse order
    $ echo {Z..A}
    Z Y X W V U T S R Q P O N M L K J I H G F E D C B A


    # Brace expansions can be nested
    $ echo a{A{1,2},B{3,4}}
    baA1b aA2b aB3b aB4b



- Parameter Expansion

    # Print the contents of an environment variable
    $ echo $USER


    # See list of all environment variables
    printenv | less



- Command Substitution

    Command substitution allows us to use the output of a command as an expansion.


    # Print the result of the ls command
    $ echo $(ls)


    # Pass results of 'which' command to 'ls'
    $ ls -l $(which cp)


    # Entire pipelines can be used in command substitutions
    $ file $(ls -d /usr/bin/* | grep zip)


    # In older bash programs, backticks may be used for command substitution instead
    $ ls -l `which cp`



- Quoting

    Now that we know how to use expansion, we can look at controlling it.  Here are examples where
      expansion goes wrong:


    # Extra whitespace is removed
    $ echo this is a          test

    this is a test


    # The $1 is an undefined variable
    $ echo The total is $100.00

    The total is 00.00



- Double Quotes

    If we place text inside of double quotes, all special characters used by the shell lose their
      special meaning and are treated as ordinary characters (except for $, \, and `).  

    This means that word-splitting, pathname expansion, tilde expansion, and brace expansion are
      suppressed.  However, parameter expansion, arithmetic expansion, and command substitution are 
      still carried out.


    # Keep formatting in strings
    $ echo "this is a       test"


    # Handle spaces in filenames
    $ ls -l "two words.txt"



- Single Quotes

    If we need to suppress all expansions, we use single quotes.


    # Suppress all expansions
    $ echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'

    text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER



- Escaping Characters

    Sometimes, we want to quote only a single character.  To do this, we can precede a character with
      a backslash.  Often this is done inside double quotes to selectively prevent an expansion.


    # Escape a single character
    $ echo "The balance for user $USER is: \$5.00"

    The balance for user me is: $5.00
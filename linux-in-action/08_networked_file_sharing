-------------------------------------------------------
CHAPTER 8 - NETWORKED FILE SHARING
-------------------------------------------------------

- Nextcloud

    - Nextcloud is an open source software suite that can use storage capacity for saving,
        editing, and consuming a wide range of documents, including serives like 
        audio/video cloud hosting.  Using Nextcloud, you can create your own private
        version of Dropbox or Google Drive.  


    - Besides hosting your sensitive material in-house, you can also use services like
        Dropbox, Google Drive, or S3 as your back end.



- Snaps

    - Snaps were created to simplify installing software on different Linux distros and solve
        the problem of having different package managers on different distros.  Snaps are 
        fully self-contained software packages that also install environment dependencies and
        any extensions they need.


    - The snap system is more than a package manager.  A snap is an isolated sandbox with 
        limited access to other system resources.  Communication between snaps is achieved
        through a system of interfaces that only connect where appropriate.  


    - Nextcloud was one of the first major projects to add its package as a snap.  Running
        the snap install for Nextcloud will give you a fully functioning Nextcloud server
        without having to manually install the LAMP elements first.

        $ sudo snap install nextcloud


    - Ubuntu Core is a special lightweight distribution primarily built to work with IoT devices
        like smart appliances and connected cars, and with swarms of Docker-powered containers.
        Core uses only snaps for package management.  



- Installing Nextcloud Prereqs

    - For an exercise, and to be able to configure Nextcloud the way we want it, we will install it
        manually.


    - For production instances of 150 people and 10TB of shared data, Nextcloud recommends:

        1. One server with 2 CPU cores
        2. 16 GB of RAM
        3. Authentication through LDAP
        4. RHEL or Ubuntu
        5. Apache with a TLS/SSL encryption certificate
        6. MySQL or MariaDB
        7. The btrfs file system instead of ext4
        8. Caching with memcached


    - To install the prereq packages,

        # Install packages
        $ sudo apt install apache2 mariadb-server wget nano

        # Install php packages
        $ sudo apt install libapache2-mod-php7.0 php7.0-gd php7.0-json php7.0-mysql \
            php7.0-curl php7.0-mbstring php7.0-intl php7.0-mcrypt php7.0-xml php7.0-zip \
            php-imagick

        # Run the mysql_secure_installation
        $ sudo mysql_secure_installation



- Configuring Apache

    - First, we need to add the 'rewrite' module so that urls can be rewritten as they move 
        between the client and server.  We also need the 'headers' module to that similar things 
        can be done with the headers.

        # Add rewrite module
        $ sudo a2enmod rewrite

        # Add headers module
        $ sudo a2enmod headers


    - We'll want to put nextcloud at the 'localhost/nextcloud' path instead of at the root, so we
        need to tell Apache how to do that.  We can either:

        A) Add a new section to our existing '000-default.conf' file.

        B) Create a new .conf file at '/etc/apache2/sites-available'.  We'll use this method.  The
             file will look like:

             # /etc/apache2/sites-available/nextcloud.conf
             Alias /nextcloud "/var/www/nextcloud/"

             <Directory /var/www/nextcloud/>
               Options +FollowSymlinks
               AllowOverride All

               <IfModule mod_dav.c>
                 Dav off
               </IfModule>

               SetEnv HOME /var/www/nextcloud
               SetEnv HTTP_HOME /var/www/nextcloud
             </Directory> 


    - Finally, we need to create a symbolic link to the new file we created.

        # Add sym link to sites-available
        $ sudo ln -s /etc/apache2/sites-available/nextcloud.conf \
            etc/apache2/sites-enabled/nextcloud.conf

      When Apache starts, it reads the contencts of '/etc/apache2/sites-enabled' looking for
        site configurations to load.  Those configurations won't actually exist in 
        'sites-enabled', but there will be links to the files in '/ect/apache/sites-available'.

      Having sym links for this makes it easy to quickly disable a site, and then when you've
        finished your edits, enable it again.  



- Downloading and Unpacking Nextcloud

    - First, we download and unpack Nextcloud

        # Download nextcloud
        $ wget https://download.nextcloud.com/server/releases/nextcloud-12.0.0.tar.bz2

        # Unpack the archive
        $ tar xjf nextcloud-12.0.0.tar.bz2


    - Next, we copy the files to '/var/www'.

        # Copy files
        $ sudo cp -r nextcloud /var/www


    - Apache will need full access to the nextcloud files.  Many web servers (including apache)
        use the special 'www-data' system user account for this, so we don't have to use 'root'
        as the file owner.

        # Change ownership
        $ sudo chown -R www-data:www-data /var/www/nextcloud

        # Restart apache
        $ sudo systemctl restart apache2


    - If there are any issues, check the logs to figure out what they are.  If there are no issues,
        we should be able to navigate the the nextcloud admin page.

        # Tail logs if there are any issues
        $ journalctl | tail

        # Navigate to nextcloud admin page
        http://localhost/nextcloud



- Configuring Nextcloud

    - First, make an admin account and enter your mariadb passwords.  Now, we can use the
        administration console.

        u: admin
        p: admin
        db: nextclouddb


    - Rather than using '/etc' the way many Linux applications do, Nextcloud keeps its main
        config file 'config.php' in the '/var/www/nextcloud/config' directory.  It contains
        authentication and environment information.  


    - Nextcloud also has a fully featured command-line shell called 'occ command'.  

        # Naviagate to nextcloud root
        $ cd var/www/nextcloud

        # Display occ help
        $ sudo -u www-data php occ -h

        # Print full list of available commands
        $ sudo -u www-data php occ list



- Using the Nextcloud Admin Console

    - Clicking the gear icon in the upper right will bring up menus for Users, Apps, or
        Admin.  


    - We'll enable HTTPS to protect data in transit in the next chapter.  Right now, we also
        want to protect the data while its at rest.  To do this, we will encrypt our files
        on the server.  

      To enable encryption, click the 'Encryption' link on the left panel and select the 
        'Enable Server-side Encryption' check box.



- Using AWS S3 as the Primary Nextcloud Storage

    - First, we need the 'External Storage Support' app bundle.  To get it, we go to 
        'Apps' > 'Disabled Apps' > 'Enable Storage Support'.


    - Next, we create a new bucket (AWS CLI must be installed and configured on the server
        to do this).  

        # Bucket name must be globally unique
        $ aws s3 mb s3://nextcloud445566


    - In the Nextcloud console, navigate to the 'External Storage' link, click the 'Add Storage'
        drop-down, and select 'Amazon S3' from the list.  Enter the bucket name, and your
        access and secret keys.


    - Now, we can copy files back and forth between our local Nextcloud and S3.
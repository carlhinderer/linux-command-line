-------------------------------------------------------
CHAPTER 5 - AUTOMATED BACKUPS
-------------------------------------------------------

- Bash Scripting Example

    - Here is a simple script found by default on most systems at '/etc/cron.daily/passwd'.

        #!/bin/sh

        cd /var/backups || exit 0

        for FILE in passwd group shadow gshadow; do
            test -f /etc/$FILE            || continue
            cmp -s $FILE.bak /etc/$FILE   && continue
            cp -p /etc/$FILE && chmod 600 $FILE.bak
        done


    - #!/bin/sh

        This is the 'shebang' line, which specifies which interpreter we want to use.  We're
          actually using sh, which is an alternative to bash, but in this case there are no
          practical differences between the two.


    - cd /var/backups   || exit 0

        This line changes the directory to '/var/backups'.  If that directory doesn't exist, 
          the script will exit and return code 0 (successful).  The '||' operator is for 'or',
          meaning that if the first command is not successful, run the second one.

        Exit codes other than 0 indicate some sort of error status.


    - for FILE in passwd group shadow gshadow; do
          ...
      done

        This is a for loop that loops through 4 files.  These files' contents determine how
          individual users and groups will be able to access particular resources.  


    - test -f /etc/$FILE    || continue

        This line tests for existence of the file.  If there isn't a file with that name in
          '/etc', then we skip that file and go to the next file in the loop.


    - cmp -s $FILE.bak /etc/$FILE     && continue

        This line checks to see if the file and the file backup are identical.  If they are,
          (determined by '&&') we will go to the next file in the loop.


    - cp -p /etc/$FILE $FILE.bak && chmod 600 $FILE.bak

        This line will back up the current file in the backups and tightens the permissions to
          prevent unauthorized users from viewing it.  



- 4 Important Files with Users and Groups

    - The 'passwd' file contains a line for each user account that exists.

        # List of user accounts
        $ cat /etc/passwd

        syslog:x:104:108::/home/syslog:/bin/false
        _apt:x:105:65534::/nonexistent:/bin/false
        sshd:x:106:65534::/var/run/sshd:/usr/sbin/nologin
        ubuntu:x:1000:1000::/home/ubuntu:/bin/bash


      The format of each line is:

        ubuntu:x:1000:1000::/home/ubuntu:/bin/bash
          ubuntu          = user name
          x               = placeholder for password (now in /etc/shadow file)
          1000            = user id
          1000            = group id
          /home/ubuntu    = user's home directory
          /bin/bash       = user's default shell


    - Note that the non-user accounts have '/bin/false' as their shell, because
        they shoudln't be used for login.


    - When you add a new user to your system, new lines will be added to the 'passwd',
        'shadow', and 'group' files.  

        # Add user (the preferred way, since it asks for a password and creates home dir)
        $ sudo adduser alan


        # Add user (does not prompt for password or create home dir)
        $ sudo useradd alan

        # Set up password separately
        $ sudo passwd alan


    - Previously, the '/etc/passwd' file included an encrypted form of each user's
        password.  Because this file must remain readable by every user on the system,
        this was deemed unwise.  Those encrypted passwords are now in '/etc/shadow'.

        # Look at encrypted passwords
        $ sudo cat /etc/shadow


    - The '/etc/group' file contains basic information about all currently existing
        system and user groups.  This file can be manually added to manage group
        membership.

      The form of each line is:

        sudo:x:27:steve, newuser, neweruser


    - The '/etc/gshadow' file contains encrypted versions of group passwords for if you
        sometimes want to allow group resources to non-group users.



- Creating a Simple Script

    - Here, we create a simple script called 'update.sh' to have apt automate updates
        to all installed software.

        #!/bin/bash
        # Script to automate regular software upgrades

        apt update
        apt upgrade -y


    - Next, to make our script executable, we must change the file attributes.

        $ chmod +x upgrade.sh


    - Now, we can copy our script into the '/etc/cron.daily' directory and it will be
        run each day.

        $ cp upgrade.sh /etc/cron.daily


    - Our script requires admin permissions, since it uses apt.  Since cron always runs
        as root by default, we don't need to add 'sudo' to our script.  If we do want to
        run it manually from the command line, we need to add 'sudo' and preface the 
        filename with the current directory.

        # Run our script manually
        $ sudo ./upgrade.sh



- A Simple Script for Changing Filenames

    - The Linux shell will often misinterpret filenames with spaces.

        $ cat big name
        cat: big: No such file or directory
        cat: name: No such file or directory

        $ cat 'big name'
        Hello World


    - Since the approach of adding quotes to every command will not always be available,
        we could write a script to replace all spaces in filenames in a directory to be
        underscores instead.

        #!/bin/bash
        echo "Which directory would you like to check?"
        read directory
            find $directory -type f | while read file; do
                if [[ "$file" = *[[:space:]]* ]]; then
                    mv "$file" `echo $file | tr ' ' '_'`
                fi;
            done


    - echo "which directory would you like to check?"
      read directory

        The first line prints its text to the screen and then waits for user input.
          The user then types something like '/home/ubuntu/files', and that value is
          assigned to the 'directory' variable.


    - find $directory -type f | while read file; do
          ...
      done

        The 'find' command is invoked to return all file objects (type -f) in the 
          specified directory.  The set of filenames will be read one at a time in the
          while loop.


    - if [[ "$file" = *[[:space:]]* ]]; then
          mv "$file" `echo $file | tr ' ' '_'`
      fi;

        Each filename will be tested for the presence of a space.  If a space is found, 
          then any spaces in the file will be changed to underscores.



- Setting Up AWS For S3 Backups

    - Backups to S3 are cheap and easy.  Storage only costs about $0.02 per GB per month.


    - To install the AWS CLI with pip (the console is written in Python):

        # First, I created a new python environment for this purpose
        $ pip install awscli


    - Next, we'll configure our AWS account.

        1. From the AWS web console, click 'My Security Credentials'
        2. Expand the Access Keys '(Access Key ID and Secret Access Key)' section
        3. Click the 'Create New Access Key' button
        4. It will show your new 'Access Key ID' and 'Secret Access Key'


    - To link our console to our account:

        Open a terminal and run 'aws configure'.

          $ aws configure

          AWS Access Key ID [None]: Enter new Access Key ID
          AWS Secret Access Key [None]: Enter new Secret Access Key
          Default region name [None]: us-west-1
          Default output format [None]:


    - Now, we should be able to list the S3 buckets in our account.

        # List s3 buckets
        $ asw s3 ls



- Creating a New S3 Bucket

    - First, we create a bucket with the 'mb' command.  Note that bucket names must
        be unique across the entire S3 system.

        # Create a bucket with some random characters in the name
        $ aws s3 mb s3://mybucket-35876


    - Now, let's say we want to back up some files stored in 'home/carl/dir2backup'.
        The 'sync' command is similar to the 'rsync' command used locally.

      The command we will run for that is:

          $ aws s3 sync /home/carl/dir2backup s3://mybucket-35876


    - To make things automatic, we'll write a script.  Note that we fully qualify the
         path to the 'aws' command in our script.

         #!/bin/bash
         /usr/local/bin/aws s3 sync /home/carl/dir2backup s3://mybucket-35876

      To make sure, we can check the full path of 'aws'.

         $ which aws



- Scheduling Regular Backups with cron

    - Here are the cron-related files in '/etc'.

        $ ls /etc | grep cron
        anacrontab
        cron.d
        cron.daily
        cron.hourly
        cron.monthly
        crontab
        cron.weekly

       'acrontab' and 'crontab' are files, while the rest are directories.


    - If you have a script you want run at set intervals, you can copy the script into
        the appropriate directory, 'cron.monthly' or 'cron.weekly' or 'cron.daily' or
        'cron.hourly'.  


    - The 'cron.d' directory is meant for files whose contents precisely time the 
        execution of commands.

      Suppose you want to run the software upgrade job once each Monday.  You can put
        a file in the /etc/cron.d directory with these contents:

        21 5  * * 1  root apt update && apt upgrade

      Now the command will run at 5:21 each Monday morning.  

        21        Minute
        5         Hour
        *         Day of month
        *         Month of year
        1         Day of week
        root      User


    - We could also add this command to the 'crontab' file, and we wouldn't have to 
        create a separate file for it.  However, the crontab does get overwritten during
        system updates sometimes, so it is not advisable.

      The 'crontab' file is actually used to execute the scripts in the 'cron' directories.



    - The 'etc/crontab' file should be left alone, but there is a user-specific crontab that
        can be used.

        # Check which jobs are scheduled in your user crontab
        $ crontab -l

        # Edit your user crontab
        $ crontab -e
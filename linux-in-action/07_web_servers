-------------------------------------------------------
CHAPTER 7 - WEB SERVERS
-------------------------------------------------------

- Building a LAMP Server

    - The LAMP server is such a common Linux configuration that Ubuntu has its own 
        installation media package.

        # The ^ indicates a special bundled package
        $ sudo apt install lamp-server


    - For this exercise, we'll install each piece separately instead.  These are the steps we
        will follow:

        1. Install Apache
        2. Add a web page to the web document root
        3. Install a SQL engine (MariaDB)
        4. Install PHP
        5. Install and configure MediaWiki



- Setting Up an Apache Server

    - Apache tends to dominate the HTTP server market, although Nginx and IIS also have
        a lot of market share.


    - To start, we just install the server, and it should already be running after install.

        $ sudo apt install apache2

      To navigate to the default page, just go to 'localhost' in your web browser.


    - Now, we'll add some content to our web site.  Apache will direct all incoming requests
        to a location specified in an Apache configuration file.  In Ubuntu, this file is
        located at '/etc/apache2/sites-available/000-default.conf'.

        # Contents of 000-default.conf
        <VirtualHost *:80>
            ServerAdmin webmaster@localhost
            DocumentRoot /var/www/html
            ErrorLog ${APACHE_LOG_DIR}/error.log
            CustomLog ${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>

       The 'DocumentRoot' attribute shows that the root document is located in '/var/www/html'.
         It is called 'index.html'.


    - We'll overwrite the Apache default file with our own file.

        <h2>Welcome!</h2>
        Take a look at our <a href="info.html">company history</a>.
        <br />
        And how about a look at our new company logo: <img src="logo.png" />



- Installing MariaDB

    - First, we'll install MariaDB.  MariaDB is a fork of MySql, but recently has been more
        actively developed.  In many places, MariaDB is just called 'mysql'.

        $ sudo apt update
        $ sudo apt install mariadb-server

      And we can check that the server is running.

        $ sudo systemctl status mysql


    - Next, we'll harden the security of our installation by running the 'mysql secure installation'
        tool.

        $ mysql_secure_installation
        New root pw: mysql1


    - Note that normally logging into the mysql shell as root is a bad idea.  We should create
        a separate database user for any tasks, which only has access to the things it needs
        access to.  For this example, however, we'll skip it.


    - Log into the mysql shell

        $ mysql -u root -p

      Note that because we had to run the security script as sudo, now we are required to use
        sudo to log into the shell.  We run these commands to fix this issue:

        > SET PASSWORD = PASSWORD('your-password');
        > update mysql.user set plugin = 'mysql_native_password' where User='root';
        > FLUSH PRIVILEGES;

      Now, we shouldn't need sudo to log in any more.


    - Create a new database and add a table.

        > CREATE DATABASE companydb;
        > use companydb;

        > CREATE TABLE Contacts (
             ID int,
             LastName varchar(255),
             FirstName varchar(255),
             Address varchar(255),
             City varchar(255)
          );

        > INSERT INTO Contacts (ID, LastName, FirstName, Address, City)
          VALUES ('001', 'Torvalds', 'Linus', '123 Any St.', 'Newtown');


    - Now, create the db for MediaWiki.

        > CREATE DATABASE wikidb;
        > CREATE USER 'mw-admin'@'localhost' IDENTIFIED BY 'mypassword';
        > GRANT ALL PRIVILEGES ON wikidb.* TO 'mw-admin'@'localhost'
               IDENTIFIED BY 'mypassword';
        > FLUSH PRIVILEGES
        > exit
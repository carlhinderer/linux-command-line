-------------------------------------------------------
CHAPTER 4 - ARCHIVE MANAGEMENT
-------------------------------------------------------

- An archive is a single file containing a collection of files and directories.
    It makes storing and sharing a collection of objects easier.

  The 2 primary reasons to create archives is to build reliable file system images
    and create efficient disk backups.



- ISO's are images of complete operating systems, specially organized to make it 
    easy to copy the included files to a target computer.  

  Images can also be created from all or parts of a working OS to make an exact 
    clone of the first system in its current state.  This can be done to rescue a
    complex installation from a failing hard drive.

  Images are also for providing identical system setups to multiple users, like 
    student workstations in a classroom.



- Disk backups are essential.  Things that can go wrong include:

    1. Hardware failure
    2. Config files can be mangled, leaving you locked out of your encrypted system
    3. Data stored on cloud infrastructure can be suddenly lost
    4. Ransomware attacks

  Note that it is not enough to create backups.  Restoring from the backups must also
    be tested on a regular basis.



- Checking the size of partitions

    - The 'df' command displays each disk partition that is currently mounted, along 
        with its disk usage and location.  The '-h' flag makes the sizes human readable.
  
        # Get details on mounted partitions
        $ df -h
  
        Filesystem      Size  Used Avail Use% Mounted on
        /dev/sda2       910G  178G  686G  21% /
        none            492K     0  492K   0% /dev
        tmpfs           3.6G     0  3.6G   0% /dev/shm
        tmpfs           3.6G  8.4M  3.6G   1% /run
        tmpfs           5.0M     0  5.0M   0% /run/lock
        tmpfs           3.6G     0  3.6G   0% /sys/fs/cgroup
  
  
        - The '/' partition is the root partition
        - The partitions with 0 bytes are likely pseudo file systems
        - The '/run' directory contains files with runtime data generated during booting


    - The '/dev/sda2' partition is the 2nd partition on Storage Device A, and it is 
        represented as a system resource through the pseudo file system directory
        '/dev'.  All devices associated with a system will be represented by a file
        in the '/dev' directory.  



- Where to Back Up Data

    - There are many choices for where to back up data:

        1. Legacy tape drives
        2. SATA drives
        3. Network Attached Storage
        4. Storage Area Network
        5. Cloud Storage Solution


    - Whatever medium you use, make sure all backups are:

        - Reliable
        - Tested
        - Rotated
        - Distributed
        - Secure
        - Compliant
        - Up to Date
        - Scripted



- Archiving with tar

    - When creating an archive, you need to specify which files to archive and where
        to put the archive file.

        # c - create a new archive
        # v - verbose output
        # f - filename for archive

        # Add all files in current directory to archive
        $ tar cvf archivename.tar *

        # Also include hidden files
        $ tar cvf archivename.tar .

        # Archive files with .mp4 extension
        $ tar cvf archivename.tar *.mp4


    - The '-z' option is used to also use gzip to compress the archive.

        # Archive and compress
        $ tar czvf archivename.tar.gz *.mp4

        # Archive and compress files from a different directory
        $ tar czvf archivename.tar.gz /home/myuser/Videos/*.mp4


    - The '-x' option is used to extract the archive

        # Extract the archive into the current directory
        $ tar -xvf archivename.tar

        # Extract the archive into a different directory
        $ tar -xvf archivename.tar -C /home/user

        # Same command will also extract a compressed archive
        $ tar -xvf archivename.tar.gz


    - Note that the .tar and .gz extensions aren't necessary.  It is just used as a 
        convention to communicate the purpose of the file.



- Splitting an Archive into Multiple Files

    - If archive files get very big, it might make sense to break them down into multiple
        smaller files.  The 'split' tool is made for this purpose.

        # Split the archive into 1-GB sized parts
        $ split -b 1G archivename.tar.gz "archivename.tar.gz.part"

        # Recreate the single file
        $ cat archivename.tar.gz.part* > archivename.tar.gz



- Streaming File System Archives

    - We can create an archive and send it to a remote machine in a single command.

        # Send archive to remote machine
        $ tar czvf - --one-file-system / /usr /var --exclude=/home/andy \
          | ssh username@10.0.3.141 "cat > /home/username/workstation-backup-Apr-10.tar.gz"


    - The '--one-file-system' option excludes all data from any file system besides the
        current one.


    - Note that this generates the archive on the remote machine without saving a 
        temporary copy on the local machine, so the amount of space on the local hard drive
        is not a limitation.



- Aggregating Files with find

    - The 'find' command searches through a file system looking for objects that
        match rules you provide.  The search outputs a list of names and locations
        of matching files, and can be redirected to other commands.

        # Archive files matching a condition
        $ find /var/www/html/ -iname <1> "*.mp4" -exec tar -rvf videos.tar {} \;


    - The '-iname' flag returns both upper and lowercase results.  Using the '-name'
        flag instead returns case sensitive results.


    - The '{}' characters tell the 'find' command to apply the 'tar' command to each
        file it finds.  



- Using the locate Command

    - The 'find' command searches the current file system for matching files.  The
        'locate' command instead searches through a pre-existing index of files,
        so it is much faster.

        # Search for files
        $ locate *video.mp4


    - The risk with running 'locate' is if the index of files have gone out of date.
        Normally, the index is updated every time the system boots.  We can also
        update it manually.

        # Update the file index
        $ updatedb



- Preserving Permissions in Archives

    - Running 'ls -l' will give details about a file's permissions.

        $ ls -l /bin | grep zcat
        -rwxr-xr-x 1 root root 1937 Oct 27 2014 zcat

        -        = if file, d if directory
        rwx      = owner permissions
        r-x      = group permissions
        r-x      = other permissions

        1        = number of links to file
        root     = owner name
        root     = group name

        1937 Oct 27 2014      = most recent edit
        zcat     = filename


    - The 'chmod' command is used to change a file's permissions.
       
        # Change owner permissions
        $ chmod u+r /bin/zcat

        # Change group permissions
        $ chmod g+w /bin/zcat

        # Change other permissions
        $ chmod o-r /bin/zcat


    - Groups are a powerful way to organize resources.  If you have 20 employees
        who need access to some resource on a server, it is much easier to grant
        permissions to 1 group than to 20 employees.  


    - Permissions can also be changed using numeric values.

        Read = 4
        Write = 2
        Execute = 1

        # Change the owner (rwx), group (rwx), and other (x) permissions
        $ chmod 771 /bin/zcat



- File Ownerships

    - When you create a new file, both the owner and group will match your username.

        # Owner is creator
        $ touch newfile
        $ ls -l
        -rw-rw-r-- 1 username username 0 Jun 20 20:14 newfile


    - If you need to copy a file over to another server, you'll need to use sudo, 
        and this will cause the owner to be 'root'.

        # Owner is root
        $ sudo touch newfile
        $ ls -l
        -rw-r--r-- 1 root root 0 Jun 20 20:37 newfile


    - In this case, we'll need to change the file ownership.

        # Change the owner
        $ sudo chown otheruser:otheruser newfile


    - When creating archives, you need to think about the file permissions.  If the
        backup is restored with the wrong ownerships and permissions, it is going to cause
        a big headache.

        # Create some files 
        # Note the '&&' will execute the 2nd command only if the 1st command is successful
        $ mkdir tempdir && cd tempdir
        $ touch file1
        $ touch file2
        $ touch file3

        # Add a new user
        $ sudo useradd newuser

        # Change the ownership of one of the files
        $ sudo chown newuser:newuser file3

        # Now create an archive
        $ tar cvf stuff.tar *

        # And extract the archive and look at the file owners
        $ tar xvf stuff.tar
        $ ls -l
        -rw-rw-r-- 1 username username 0 Jun 20 11:31 file1
        -rw-rw-r-- 1 username username 0 Jun 20 11:31 file2
        -rw-rw-r-- 1 username username 0 Jun 20 11:31 file3


      As we can see, the problem is that only users with administrator powers can work with
        resources in other users' accounts.  The solution is to use 'sudo' when using the
        tar operations.



- Archiving Partitions with dd

    - We can use 'tar' to replicate entire file systems by copying the files from one
        computer and then pasted them on top of a fresh Linux install of another
        computer.  However, since those archives weren't complete images, they
        require a running host OS as a base.


    - Using 'dd' can make perfect byte-by-byte images of anything digital.  Note that
        the command is known as 'disk destroyer', because one spelling mistake in the
        command can wipe out an entire hard drive.

        # Clone one entire drive to a spare drive
        $ sudo dd if=/dev/sda of=/dev/sdb

        # Create an image file from a drive
        $ sudo dd if=/dev/sda of=/home/username/sdadisk.img

        # Restore your disk using the image file
        $ sudo dd if=sdadisk.img of=/dev/sdb


    - The 'dd' command can also be used to wipe data from disks.  

        # Fill a drive with zeros
        $ sudo dd if=/dev/zero of=/dev/sda1

        # Fill a drive with random zeros
        $ sudo dd if=/dev/urandom of=/dev/sda1



- Synchronizing Archives with rsync

    - Backups have to happen regularly, but daily transfers of huge archives can
        place a lot of strain on network resources.  The 'rsync' command can transfer
        only the small number of files that were created or updated since the last
        backup.

        # Create 10 files
        $ mkdir nynewdir && cd mynewdir
        $ touch file{1..10}

        # Make a directory to hold backups on remote machine
        $ ssh username@10.0.3.141 "mkdir syncdirectory"

        # Copy files over to remote machine
        $ rsync -av * username@10.0.30141:syncdirectory

        # Then, we can change the files and run the same command to send the updates
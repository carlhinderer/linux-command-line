-----------------------------------------------------------
CHAPTER 11 - WORKING AS ROOT
-----------------------------------------------------------

- Why root?

    - The root user can do anything on a Linux computer.  They can perform any task, 
        regardless of which user owns a file, directory, or process.  They can delete
        undeletable files and add and delete users.  They can kill, suspend, or change
        the priority of any running process.

    - Non-root users do not have the authority to perform root-level tasks on a Linux
        computer.  For example, they may not enter directories that belong to other
        users.  

    - Although it is possible for the user of a non-root account to have root privileges,
        it is not a best practice to do so.  If a few users need access to a few
        commands that require root privilege, the sudo facitlity should be used to give
        them access to only those commands.



- The su Command

    - The su command (aka 'switch user' or 'substitute user') allows us to work on the 
        command line as a different user from the one we logged in as.  Each SysAdmin
        should have a non-root account, and switch to the root user only when 
        root privileges are required.


    - If we switch to root and don't use the hyphen with the command, the environment,
        $PATH, and other environment variables including the $PWD will remain that of
        the previous user.  This is for historical backwards compatibility reasons.

      If we add the hyphen, it tells the su command to start up a new login shell, which
        sets the root environment and makes /root the $PWD.  If we're switching to a user
        other than root, it will set the environment for that user.


    - The root user can 'su' to any other user's account without needing their password.



- Getting to Know the root Account

    - Each Linux user account has attributes which provide the OS with information about
        how to handle the account, files belonging to the account, and any commands
        entered on behalf of the account.  These include the user id (UID) and group id
        (GID).


    - Here, we determine the UID and GID of the root account:

        # Switch to root
        $ su -

        # Get the UID and GID of the root user
        $ id
        uid=0(root) gid=0(root) groups=0(root)

        # Files in home directory, with user name (root) and group name (root)
        $ ll
        -rw-------. 1 root root 1354 Aug 13 16:24 anaconda-ks.cfg
        -rw-r--r--. 1 root root 1371 Aug 18 10:16 initial-setup-ks.cfg

        # Files in home directory, with UID (0) and GID (0) instead
        $ ll -n
        -rw-------. 1 0 0 1354 Aug 13 16:24 anaconda-ks.cfg
        -rw-r--r--. 1 0 0 1371 Aug 18 10:16 initial-setup-ks.cfg


    - A non-root user cannot create new directories in most parts of the directory tree.  
        They can create new directories in 2 places:

          1. Their home directory
          2. The /tmp directory


    - To explain why non-root users cannot create new files or directories, we can look at
        the ownerships and permissions of the root directory:

        [student@studentvm1 ~]$ ls -la /
        total 76
        dr-xr-xr-x.  18 root root  4096 Apr 25 02:19 .
        dr-xr-xr-x.  18 root root  4096 Apr 25 02:19 ..
        <snip>
        dr-xr-xr-x.  13 root root     0 Sep 12 17:18 sys
        drwxrwxrwt.  10 root root  4096 Sep 13 16:45 tmp
        drwxr-xr-x.  13 root root  4096 Apr 25 02:19 usr
        drwxr-xr-x.  22 root root  4096 Apr 25 02:23 var


      This is the structure of Linux permissions for files and directories:

        Directory    User    Group    Other
        d or -       rwx     rwx      rwx


      The User is the owner of the directory.



- Disadvantages of root

    - Because root can do anything on a Linux system, any error made by root has the
        potential to create catastrophic harm.  



- Escalating User Privilege

    It is a common requirement for non-root users to perform some task that normally requires
      root permissions.  This can be done safely!


    1. The Bad Ways

         - Just giving local users the root password is bad.

         - Sometimes, you'll also see admins just change the UID and GID of a local user to
             zero.  You can do this by editing the passwd, group, and shadow files.  It is
             a good idea to check for this when taking over as a new SysAdmin.


    2. Using Sudo

         - Using the sudo facility can reduce the SysAdmin's workload while maintaining security
             and a log of the users' actions by ID and command.  It allows unpriveleged users
             some escalation of privileges for one command or group of commands.


         - Here, we'll display our internet connections:

             # Login as root
             $ su -

             # List internet connections
             $ ip addr
             1: lo: <LOOPBACK,UP,LOWER_UP>
             ...
             2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP>
             ...

             # Switch back to the student user and try to View the details of your NIC
             $ su - student
             $ mii-tool -v enp0s3
             SIOCGMIIPHY on 'enp0s3' failed: Operation not permitted


         - This failed because the student does not have the privileges required to run that
             command.  We'll give the user sudo access to this single command.

             # Switch back to root and enter the sudoers file
             $ su -
             $ visudo

             # Then enter this line at the end of the file
             student ALL=/usr/sbin/mii-tool


             # Now we can run the command as student as sudo
             $ su - student
             $ sudo mii-tool -v enp0s3


    3. The sudoers File

         - We use the 'visudo' command to edit the /etc/sudoers file instead of a regular text
             editor.  This command will also enable any changes you have made after the file
             is edited.


         - File Details:

             - Host aliases

                 The host aliases section is used to create groups of hosts on which commands
                   or command aliases can be used to provide access.  The basic idea is that
                   this single file will be maintained for all hosts in an organization and
                   copied to /etc of each host.

                 This allows some hosts to be configured as a group, with the ability to start
                   and stop services like HTTPD and DNS, mount filesystems, etc.
                 

             - User aliases

                 The user aliases allow root to sort users into aliased groups so that an
                   entire group can be provided access to certain root capabilities.

                   User_Alias AUDIO = dboth, ruser


             - Command aliases

                 The command aliases are lists of related commands (such as networking commands
                   or update commands).  They make it simpler to provide access to groups of
                   commands.


             - Environment defaults

                 This section sets up some default environment variables.  


             - Command section

                 This section is the main part of the suders file.  It uses the aliases already
                   defined above to tell sudo who can do what on which hosts.  

                   # First ALL allows ruser to run the commands on any host
                   # Second ALL allows ruser to run commands as any other user
                   # Third ALL means ruser can run all commands without restrictions
                   ruser     ALL=(ALL) ALL

                   # Specifies that users in AUDIO group can run program
                   AUDIO     guest1=/usr/local/bin/myprog


             - Bypassing passwords

                 It is possible to use NOPASSWORD to allow the users in the AUDIO group to a
                   program without needing to enter their passwords.

                   # Don't require a pw when running myprog
                   AUDIO     guest1=NOPASSWORD : /usr/local/bin/myprog


             - wheel

                 The wheel specification in the command section of the sudoers file is used to
                   delegate full root powers to multiple users without requiring the root 
                   password.

                   %wheel    ALL=(ALL) ALL


    4. Real Sysadmins don't sudo


    5. sudo or not sudo


    6. Bypass sudo
    7. Valid Uses for sudo


- Using sudo as root
-----------------------------------------------------------
CHAPTER 15 - ADVANCED SHELL TOPICS
-----------------------------------------------------------

- The bash Shell

    - The bash shell, like any other shell, is a command-line interpreter.  It takes
        commands entered onto the command line, expands any file globs (like * and ?),
        converts the results into tokens for use by the kernel, then passes the
        resulting command to the kernel for execution.


    - bash is both a command interpreter and a programming language.  



- Shell Options

    - There are a wide varitey of shell options available, but the defaults rarely need to be
        changed.

        # List the current settings for shell options
        $ shopt



- Shell Variables

    - We use the $ operator to reference variables.  Note that bash does not allow spaces
        before or after the = assignment operator.

        # Print an existing variable
        $ echo $HOSTNAME

        # Create a variable and print it
        $ MYVAR="Hello World!"
        $ echo $MYVAR



- Commands

    - Commands fall into 2 categories:

        1. Internal Commands = commands that are an integral part of the shell

        2. External Commands = commands with a separate existence, which have their own
                                 executable files, like GNU and Linux core utilities


    - Internal commands are executed before an external command with the same name.  For
        instance, there is an internal 'echo' command and an external 'echo' command.  
        Unless you specify the path to an external command, the internal one will be used.


    - When a command is entered, this is how the bash shell works:

        1. Type the command and press Enter.

        2. Bash parses the command to see if a path is prepended to the command name.  If it
             is, go to Step 4.

        3. Bash checks to see if the command is internal.  If it is, bash runs the command
             immediately.

        4. If a path is used as part of the command, bash forks a new subprocess in which to
             execute the command and then runs the command.  This forking takes time as well
             as CPU, I/O, and RAM.

        5. If no path is specified, and this is not an internal command, bash searches the
             list of aliases and shell functions (system- and user-created procedures).  If
             one is found, it forks a new shell subprocess and executes the function or alias.

        6. If no alias or function is located, bash then searches the list of directories 
             specified in the $PATH shell variable.  When the command is located, bash forks
             a new subshell to execute the command.

        7. If a command is run in a subshell, the subshell terminates and execution is 
             returned to the parent shell.



- The PATH

    - The $PATH variable defines a colon-separated list of directories in which the 
        system and the shell look for executable files.  The shell looks in each directory
        listed in $PATH for executable files when a non-internal command is entered.

        # Display the default value of PATH
        $ echo $PATH

        /usr/local/bin:
        /usr/bin:
        /usr/local/sbin:
        /usr/sbin:
        /home/student/.local/bin:
        /home/student/bin


    - Looking more closely:

        /usr/local/bin
        --------------------
          Specifically defined location for storing locally created shell scripts such as
            shell scripts for SysAdmins or use by all users.

        /usr/local/etc
        --------------------
          Used for storing configuration files for the executables in /usr/local/bin.

        /usr/bin
        --------------------
          Most user-executable binary files go here.  It is intended for use by all users.

        /usr/sbin
        --------------------
          Same as /usr/bin, but for binaries that require superuser privileges.

        /usr/local/sbin
        --------------------
          Standard, but non-essential system binaries for use by the SysAdmin.

        /home/student/.local/bin
        --------------------
          A user's private executables which were locally created.

        /home/student/bin
        --------------------
          A user's private executables which were not locally created.



    - Note that our home folder is not in the path, which is why we have to precede our
        executable with the directory name.

        # Different ways to run an executable in our home directory
        $ ./cpuHog
        $ ~/cpuHog
        $ /home/student/cpuHog



- Internal Commands

    - The bash shell has a large number of built-in internal commands.

        # Get list of built-in commands
        $ help

        # Get help for a single built-in command
        $ help echo

        # Note that help pages are for internals, while man pages are for externals
        $ man Bash


    - The 'type' command lets us identify which commands are built-in.

        # Get types of commands
        $ type echo getopts egrep

        echo is a shell builtin
        getopts is a shell builtin
        egrep is aliased to `egrep --color=auto'



- External Commands

    - External commands are those that exist as executable files and which are not part
        of the shell.  The executable files are stored in locations like /bin, /usr/bin,
        /sbin, and so on.

        # Look at files in /bin and locate some familiar commands
        $ cd /bin
        $ ll

        # Get types of commands and the locations of their executables with -a option
        $ type -a echo getopts egrep

        echo is a shell builtin
        echo is /usr/bin/echo
        getopts is a shell builtin
        getopts is /usr/bin/getopts
        egrep is aliased to `egrep --color=auto'
        egrep is /usr/bin/egrep



- Compound Commands

    - The simplest form of compound command is to just string together multiple commands
        on a single line:

        $ command1 ; command2 ; command3 ; command4 ; command5


    - We can anticipate the possibility of errors by using the && and || operators:

        # If command1 is successful (0 return code), then run command2
        $ command1 && command2

        # If command1 fails (nonzero return code), then run command2
        $ command1 || command2


    - The && and || operators work since every command sends a return code (RC) to the 
        shell that indicates whether it was successful or not.  By convention, a return
        code of 0 indicates success, while any positive number indicates some type of
        failure.  The bash shell uses the '$?' variable to store the RC of the last
        operation.

        # Successful command
        $ ll ; echo "RC = $?"
        RC = 0

        # Unsuccessful command
        $ ll /root ; echo "RC = $?"
        ls: cannot open directory '/root': Permission denied
        RC = 2


    - Examples of && and || operators:

        # If successful
        $ mkdir ~/testdir/testdir9 && touch ~/testdir/testdir9/testfile1

        # If unsuccessful
        $ mkdir ~/testdir/testdir9 || echo "testdir9 was not created."



- Brace Expansion

    - Brace expansion is a time-saving tool.  It can be used to generate lists of
        arbitrary strings and insert them into a specific location.

        # Simple brace expansion
        $ echo {string1,string2,string3}
        string1 string2 string3

        # Brace expansion at end of string
        $ echo "Hello "{David,Jen,Rikki,Jason}.
        Hello David. Hello Jen. Hello Rikki. Hello Jason.

        # Brace expansion in the middle of a string
        $ echo b{ed,olt,ar}s
        beds bolts bars


    - We can also use brace expansion for sequences of numbers.

        # Generate 10 test filenames
        $ echo testfile{0,1,2,3,4,5,6,7,8,9}.txt

        # Shorter way to generate 10 test filenames
        $ echo testfile{0..9}.txt

        # More complex example
        $ echo test{0..9}.file{1..4}

        # Characters can also be generated in a sequence
        $ echo test{000..200}{a..f}.file



- Special Characters (File Globbing)

    - File globbing (aka using special pattern characters) allows us a lot of
        flexibility in matching file names and other strings.

        ? matches a single character
        * matches one or more characters


    - Some examples:

        # Count the number of files with 'test' in the file name
        $ ls *test* | wc -l

        # Remove files that start with 'my' (-v print files that were deleted)
        $ rm -v my*

        # More complex pattern
        $ ls *e.?6?*.asc



- Sets

    - Here are the character sets available:

        [0-9]        Any numerical character
        [a-z]        Lowercase alpha
        [A-Z]        Uppercase alpha
        [a-zA-Z]     Any uppercase or lowercase alpha
        [abc]        The three lowercase alpha characters, a, b, and c
        [!a-z]       No lowercase alpha
        [!5-7]       No numbers 5, 6, or 7
        [a-gxz]      Lowercase a through g, x, and z
        [A-F0-9]     Uppercase A through F, or any numeric


    - Examples:

        # Find files that contain '6' in the middle of a 3-digit number
        $ ls *[0-9][6][0-9]*

        # Same, but we know the leftmost digit is 0 or 1
        $ ls *[01][6][0-9]*

        # Contains 6 in the center position, but not in either of the other digits
        $ ls *[!6][6][!6]*

        # Same, but filename ends in a 't'
        $ ls *[!6][6][!6]*t

        # Same, but have an 'a' or 'e' directly after the number
        $ ls *[!6][6][!6][ae]*t



- Meta-Characters

    - Here is a list of meta-characters that have special meaning in the shell:

        $           Shell variable
        ~           Home directory variable
        &           Run command in background
        ;           Command termination/separation
        >,>>,<      I/O redirection
        |           Command pipe
        ‘,”,\       Meta quotes
        `...`       Command substitution
        (), {}      Command grouping
        &&, ||      Shell control operators. Conditional command execution



- Using grep

    - File globbing is useful, but it is only for use on file names, not the contents
        of the files.  The 'grep' tool can be used to extract and print to STDOUT
        all of the lines from a data stream based on matching patterns.  These 
        patterns can be simple text patterns or complex regex's.


    - grep was written by Ken Thompson in 1974, and is now maintained by the GNU project.
        It is installed by default on all Linux distros.


    - To find lines with 'eth' in the kernel logs using less:

        # Page through the kernel logs
        $ dmesg | less

        # Then, can type /eth to find instances in the logs


    - To find lines with 'eth' in the kernel logs using grep:

        # Find all lines that contain 'eth'
        $ dmesg | grep -i eth 

        # Use grep on specified file globs
        $ cd /var/log ; grep -i eth messages*


        # Find lines that contain 'eth' followed by 0-9
        $ grep -i eth[0-9] messages*

        # Specify multiple search expressions
        $ grep -i -e eth[0-9] -e enp0 messages*


    - The regex's above are BREs (basic regular expressions).  We can also use EREs
        (extended regular expressions) with the -E option.

        # Use ERE
        $ grep -Ei "eth[0-9]|enp0" messages*

      Traditionally, the 'egrep' command was used for EREs, but that command is now
        deprecated and may not be available in the future.  The grep -E "ERE" command should
        be used instead.


    - For another example, suppose we need to list all the configuration files in the /etc
        directory.  These files typically end with '.conf', '.cnf', or 'rc'. 

      To do this, we need to use the $ anchor to specify that search string is at the end of
        the string being searched.

        # -R flag searches all subdirectories recursively
        $ ls -aR | grep -E "conf$|cnf$|rc$"

        # The ^ is used to anchor the beginning of the string
        $ ls -R | grep -E "^kde"



- Finding Files

    - We can use the 'ls' command to find files, and we can use the '-R' flag
        to search through subdirectories recursively.

        # Find files recursively
        $ ls -R | grep -E "^kde"


    - The problem with the above command is that it will output file names, but not
        the full path (with the subdirectory structure).  The 'find' command is used
        to explicitly search for files in a directory tree using patterns and to 
        either list the files (with their subdirectories) or perform some operation
        on them.

        # -name option used for patter, -iname used for case insensitive
        $ find /etc -iname "kde*"


    - Here are some examples:

        # Get the number of empty files in your home directory with 'test.file' in name
        $ find . -type f -empty -name "*test.file*" | wc -l

        # Find empty files in your home directory without 'test.file' in name
        $ find . -type f -empty ! -name "*test.file*"

        # Find number of files that are not empty (! can be used with any option)
        $ find . -type f ! -empty -name "*test.file*" | wc -l


    - We can also perform some action on the files that are found.  For instance, we
        can delete the empty files.

        # Delete all the empty files with 'test.file' in the names
        $ find . -type f -empty -name "*test.file*" -delete

        # Check that empty files were deleted
        $ find . -type f -empty -name "*test.file*"

        # Check that nonempty files were not deleted
        $ find . -type f ! -empty -name "*test.file*" | wc -l


    - Here is a more advanced example:

        # Generate a large file (~1GB)
        $ pwgen -s 80 14000000 > testdir7/bigtestfile.txt

        # Use -ls option to list files that were found and sort them 
        #   (sorted by inode number since its column 1)
        $ find . -type f ! -empty -name "*test.file*" -ls

        # Sort files by size instead 
        #   (-n for numeric sort, k=7 for 7th column which is size)
        $ find -type f -size +3k -ls | sort -nk 7
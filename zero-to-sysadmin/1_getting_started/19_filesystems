-----------------------------------------------------------
CHAPTER 19 - FILESYSTEMS
-----------------------------------------------------------

- Definitions

    - There are several different meanings of the word 'filesystem':

        1. A specific type of data storate format, like EXT3, EXT4, BTRFS, or XFS.
             Linux supports almost 100 types of filesystems.  Each uses its own metadata
             structures.

        2. The entire Linux hierarchical directory structure starting at the / root 
             directory.

        3. A partition or logical volume formatted with a specific type of filesystem that
             can be mounted on a specified mount point on a Linux filesystem.



- Filesystem Functions

    1. Data storage = A structured place to store and retrieve data (primary purpose)

    2. Namespace = A naming and organizational methodology that provides rules for naming
                     and structuring data

    3. Security Model = A scheme for defining access rights

    4. API = System function calls to manipulate filesystem objects like directories and files

    5. Implementation = The software to implement the above functions



- The Linux Filesystem Hierarchical Standard

    - The Standard

        - The Linux directory structure is well-defined and documented in the Linux FHS
            (Filesystem Hierarchy Standard).   


            /
            Primary hierarchy root and root directory of the entire file system hierarchy.

            /bin
            Essential command binaries that need to be available in single user mode; for 
              all users, e.g., cat, ls, cp.

            /boot
            Boot loader files, e.g., kernels, initrd.

            /dev
            Device files, e.g., /dev/null, /dev/disk0, /dev/sda1, /dev/tty, /dev/random.

            /etc
            Host-specific system-wide configuration files

            /etc/opt
            Configuration files for add-on packages that are stored in /opt.

            /etc/sgml
            Configuration files, such as catalogs, for software that processes SGML.

            /etc/X11
            Configuration files for the X Window System, version 11.

            /etc/xml
            Configuration files, such as catalogs, for software that processes XML.

            /home
            Users' home directories, containing saved files, personal settings, etc.

            /lib 
            Libraries essential for the binaries in /bin and /sbin.

            /lib<qual>
            Alternative format essential libraries. Such directories are optional, but if 
              they exist, they have some requirements.

            /media
            Mount points for removable media such as CD-ROMs (appeared in FHS-2.3 in 2004).

            /mnt
            Temporarily mounted filesystems.

            /opt
            Optional application software packages.

            /proc
            Virtual filesystem providing process and kernel information as files. In Linux, 
              corresponds to a procfs mount. Generally automatically generated and populated 
              by the system, on the fly.

            /root
            Home directory for the root user.

            /run
            Run-time variable data: Information about the running system since last boot, e.g., 
              currently logged-in users and running daemons. Files under this directory must 
              be either removed or truncated at the beginning of the boot process; but this is 
              not necessary on systems that provide this directory as a temporary filesystem (tmpfs).

            /sbin
            Essential system binaries, e.g., fsck, init, route.

            /srv
            Site-specific data served by this system, such as data and scripts for web servers, data 
              offered by FTP servers, and repositories for version control systems 
              (appeared in FHS-2.3 in 2004).

            /sys
            Contains information about devices, drivers, and some kernel features.

            /tmp
            Temporary files (see also /var/tmp). Often not preserved between system reboots, and may 
              be severely size restricted.

            /usr
            Secondary hierarchy for read-only user data; contains the majority of (multi-)user 
              utilities and applications.

            /usr/bin
            Non-essential command binaries (not needed in single user mode); for all users.

            /usr/include
            Standard include files.

            /usr/lib
            Libraries for the binaries in /usr/bin and /usr/sbin.

            /usr/lib<qual>
            Alternative format libraries, e.g. /usr/lib32 for 32-bit libraries on a 64-bit 
              machine (optional).

            /usr/local
            Tertiary hierarchy for local data, specific to this host. Typically has further 
              subdirectories, e.g., bin, lib, share.

            /usr/sbin
            Non-essential system binaries, e.g., daemons for various network-services.

            /usr/share
            Architecture-independent (shared) data.

            /usr/src
            Source code, e.g., the kernel source code with its header files.

            /usr/X11R6
            X Window System, Version 11, Release 6 (up to FHS-2.3, optional).

            /var
            Variable files—files whose content is expected to continually change during normal 
              operation of the system—such as logs, spool files, and temporary e-mail files.

            /var/cache
            Application cache data. Such data are locally generated as a result of time-consuming 
              I/O or calculation. The application must be able to regenerate or restore the data. 
              The cached files can be deleted without loss of data.

            /var/lib
            State information. Persistent data modified by programs as they run, e.g., databases, 
              packaging system metadata, etc.

            /var/lock
            Lock files. Files keeping track of resources currently in use.

            /var/log
            Log files. Various logs.

            /var/mail
            Mailbox files. In some distributions, these files may be located in the deprecated 
              /var/spool/mail.

            /var/opt
            Variable data from add-on packages that are stored in /opt.

            /var/run
            Run-time variable data. This directory contains system information data describing 
              the system since it was booted.  In FHS 3.0, /var/run is replaced by /run; a system 
              should either continue to provide a /var/run directory, or provide a symbolic link 
              from /var/run to /run, for backwards compatibility.

            /var/spool
            Spool for tasks waiting to be processed, e.g., print queues and outgoing mail queue.

            /var/spool/mail
            Deprecated location for users' mailboxes.

            /var/tmp
            Temporary files to be preserved between reboots. 



    - Problem Solving

        - Adhering to the FHS makes problem solving as easy as possible, since many applications
            expect things to be in certain places.

        - Since most Linux utilities are consistent in their use of /etc for config files, the
            config file for a give program is easy to find.


    - Using the Filesystem Incorrectly

        - One example of using the filesystem incorrectly is when a developer installed an 
            application in /var.  The application was crashing, because the /var system was
            full, and the log files (stored in /var/log) could not be appended to.  

          Removing the application and reinstalling it in /opt resolved the problem.


    - Adhering to the Standard

        - As SysAdmins, we often create our own scripts to make our work easier.  When
            we create scripts, they should be stored in /usr/local/bin and any config
            files should be stored in /usr/local/etc.  

          There is also a /var/local directory in which database files for local programs
            can be stored.

        - By always adhering to this standard, it is much easier to remember where things
            are installed when you need to troubleshoot them.



- Linux Unified Directory Structure

    - The Linux filesystem unifies all physical hard drives and partitions into a single
        directory structure starting in the / root directory.   This means there is only
        one single directory tree in which to search for files and programs.

    - This can only work because a filesystem such as /home, /tmp, /var, /opt, or /usr
        can be created on separate physical hard drives.  Even removable drives like USB
        will be mounted onto the root filesystem.



- Filesystem Types

    - Linux supports reading about 100 partition types.  It can create and write to only 
        a few of those.  But it is common to mount filesystems of different types on the
        same root filesystem.


    - The choices available when creating a new filesystem in Fedora are:

            btrfs
            cramfs
            ext2
            ext3
            ext4
            fat
            gfs2
            hfsplus
            minix
            msdos
            ntfs
            reiserfs
            vfat
            xfs



- Mounting

    - The term 'mounting' a filesystem refers back to the early days of computing when a
        tape or removable disk pack would need to be physically mounted on an appropriate
        drive device.


    - A 'mount point' is simply an empty directory, like any other, which is created as
        part of the root filesystem.  So, for example, the home filesystem is mounted on
        the directory /home.  


    - Mounting of filesystems during the startup process is managed by the /etc/fstab 
        (filesystem table) config file.  It is a list of filesystems that are to be mounted,
        their designated mount points, and any options needed.


    - Filesystems are mounted on an eixsting directory using the 'mount' command.  In general,
        any directory used as a mount point should be empty.  However, Linux will not 
        prevent you from mounting a filesystem over a directory that already contains files.



- The Linux ext4 Filesystem

    - The EXT filesystem has its roots in the Minix OS (released in 1987 by Andrew 
        Tannenbaum).  When Linus was writing the original Linux kernel, he needed a 
        filesystem and didn't want to write one at that point, so he just included the
        Minix filesystem.

      The original EXT filesystem (Extended) was written by Remy Card and released with 
        Linux in 1992 to overcome the size limitations of the Minix filesystem.  EXT2,
        EXT3, and EXT4 each followed with additional fixes and features.


    - The EXT4 filesystem has the following meta-structures:

        - A boot sector in the first sector of the hard drive on which it is installed.
            The boot block includes a very small boot record and a partition table that
            supports up to 4 partitions.

        - After the boot sector, has some reserved space which spans the space between
            the boot record and the first partition (which is usually on the next cylinder
            boundary).  The GRUB boot loader uses this space for its boot code.

        - The space in each EXT4 partition is divided into cylinder groups that allow for
            more granular management of the data space.  Typically, each group usually
            amounts to about 8 MB.  

        - Each cylinder group contains:

            - A superblock which contains the metadata that defines the other filesystem
                structures and locates them on the physical disk assigned to the group.

            - An inode bitmap block that is used to determine which inodes are used and 
                which are free.

            - The inodes which have their own space on the disk.

            - A zone bitmap to keep track of the used and free data zones.

        - A journal which records in advance the changes that will be performed to the 
            filesystem and which helps eliminate data loss due to crashes and power failures.



    - Cylinder Groups

        - The 'dumpe2fs' utility can be used to dump the data from the cylinder group's primary
            superblock.

            # Display superblock data for the root / filesystem
            $ dumpe2fs -h /dev/mapper/fedora_studentvm1-root
            


    - The inode

        - An inode (index node) is a 256-byte block on the disk that stores data about the file.
            This includes the size of the file, the user id and group ids of the owners of the
            file, the file mode, and the 3 timestamps.  It does not include the name of the file.



    - Journal

        - The journal (introduced in EXT3) was created to overcome the massive amount of time 
            the 'fsck' program required to fully recover a disk structure damaged by an improper
            shutdown that occurred during a file update.

        - Instead of writing to disk data areas directly, the journal provides for writing of
            file data to a specified area on disk along with its metadata.  Once the data is
            safe on the hard drive, it can be merged or appended to the target file with no
            chance of data loss.

        - If a shutdown occurs, a consistency check will be done at the next boot and any data
            remaining in the journal will be committed to the data areas of disk.


        - Journaling does impact write performance.  For this reason, there are 3 options 
            available for the journal to allow users to choose between performance and data
            integrity:

            1. Journal = both metadata and file contents are written to journal, greatest reliability, 
                           but worst performance since all writes happen twice

            2. Writeback = only metadata is written to journal, faster but subject to out-of-order
                             writes

            3. Ordered = compromise between journal and writeback, forces file contents to be
                           written before adding metadata to journal (this is the default on EXT4)

          This option can be changed in /etc/fstab.



- Data Allocation Strategies

    - The EXT filesystem implements several data allocation strategies that ensured minimal
        file fragmentation.  Data allocation for EXT4 is handled using extents.

      An extent is described by its beginning and ending place on the hard drive, which greatly
        reduces the number of pointers needed to describe the location of data in larger files.


    - EXT4 reduces fragmentation by scattering newly created files around the disk instead of
        bunching them up in one location.  



- Data Fragmentation

    - For many older PC filesystems such as FAT and NTFS, fragmentation is a significant problem,
        resulting in hard drive performance degradation.  For this reason, defragmentation became
        an industry in itself.  

      This was partially mitigated by the rise of SSD drives, where there is no performance 
        penalty for fragmentation.


    - We can use the 'fsck' utility to check for file system fragmentation if we need to.

        # Generate report on filesystem (-f to force checking and -n to not fix problems)
        $ fsck -fn /dev/mapper/fedora_studentvm1-home


    - The 'tune2fs' and 'e4defrag' utilities can be used when advanced defragmenting stragegies 
        are required.



- Repairing Problems

    - We can repair problems that cause the host not to boot, such as a misconfigured /etc/fstab
        file, but in order to do so, the filesystem where the config files resides must be
        mounted.


    - The /etc/fstab file entries have the following format:

        Filesystem label     Mount point          Type       List of options         Used for backups        
         ------------------------------------------------------------------------------------------
        LABEL=SS-R100        /media/SS-R100       vfat       user,noauto,defaults    0  0
        

    - Sometimes, the file system will be damanged by an unexpected shutdown.  If this does happen,
        the 'fsck' utility can be used to fix most problems.

        # Check for fsck messages that occurred during boot time
        $ cd /var/log ; grep fsck messages
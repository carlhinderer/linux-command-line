-----------------------------------------------------------
CHAPTER 10 - AUTOMATION WITH BASH SCRIPTS
-----------------------------------------------------------

- About Updates

    - We want to make a script that will install required updates.  There are 2 things to
        understand about Linux updates.

        1. We can install updates while performing any other task.  Linux does not force us to
             reboot after updates are installed.

        2. There are times when rebooting after updating is a good idea, if certain packages
             were updated.



- Create a List of Requirements

    1. We must determine if updates are available.

    2. We must determine if any packages that require a reboot are being updated (for instance
         the kernel, glibc, or systemd).

    3. At this point, we can install the update.

    4. Before rebooting (if required), we run the 'mandb' utility to update the man pages.

    5. If the kernel was updated, we need to rebuild the grub loader config file so that it
         includes recovery options for each installed kernel.



- The CLI Program

    - There are 4 steps required to actually do the updates in the CLI program.  

        1. Do the update
        2. Update the man page database
        3. Rebuild the grub config files
        4. Reboot the host


    - This CLI program (run as the root user) only checks for updates instead of actually doing
        them.

        # Update process
        $ dnf check-update ; mandb ; grub2-mkconfig > /boot/grub2/grub.cfg ; reboot



- Convert the CLI Program to a Script

    - We'll create a minimal script to do run these commands.  We want to put the script in the
        root user's home directory.  We want to make it executable for root and the root group,
        but with no permissions for other users.

        # Create the script
        [root@studentvm1 ~]# cd ; touch doUpdates ; chmod 770 doUpdates


    - Now, we can create the shell of our script:

        doUpdates
        -----------------------------------------
        #!/usr/bin/bash
        dnf check-update
        mandb
        grub2-mkconfig > /boot/grub2/grub.cfg
        # reboot


    - To run the script:

        # Run the script
        $ ./doUpdates



- Add Some Logic

    - First, we need to define some variables, $Check and $doReboot, and then we need to add
        some logic around the 'dnf' and 'reboot' commands.


        doUpdates
        --------------------------------------------------
        #!/usr/bin/bash

        ############################################
        # Initialize variables
        ############################################
        Check=1
        doReboot=0

        ############################################
        # Main body of program
        ############################################
        # First we decide whether to do updates or just check whether any are available
        if [ $Check == 1 ]
        then
           # Check for updates
           dnf check-update
        fi

        # Update the man database
        mandb

        # Update the grub configuration
        grub2-mkconfig > /boot/grub2/grub.cfg

        # Reboot if necessary
        if [ $doReboot == 1 ]
        then
           reboot
        else
           echo "Not rebooting"
        fi



- Limit to Root

    - This script should be limited to usage by the root user.  We can do this partially
        through ownership and permission settings, but we should also check for it in 
        the script.

        ############################################
        # Check for root
        ############################################        
        if [ `id -u` != 0 ]
        then
           echo "You must be root user to run this program"
           exit
        fi


    - To test this, we can run as root and also as a regular user.

        # Run as root
        $ ./doUpdates

        # Run as non-root user
        $ chmod 777 doUpdates
        $ su - student
        $ ./doUpdates

        # Change permissions back
        $ su - root
        $ chmod 770 doUpdates



- Add Command-Line Options

    - Now, we want to add some command-line options.  The 'getopts' command gets options from
        the command line, and along with the 'while' and 'case' structure, allows us to set
        variables or perform other tasks based on the options read from the command line.


    - First, we need to add some new variables:

        ############################################
        # Initialize variables
        ############################################
        Check=1
        doReboot=0           # Will be set to true if -r flag is set
        NeedsReboot=0        # Will be set to true if kernel or glibc is to be updated
        UpdatesAvailable=0   # Will be set to true if 1 or more updates is available


    - Now, we can process the input options:

        ############################################
        # Process the input options
        ############################################
        # Get the options
        while getopts ":cr" option; do
           case $option in
              c) # Check option
                   Check=1;;
              r) # Reboot option
                   doReboot=1;;
             \?) # Incorrect option
                   echo "Error: Invalid option."
                   exit;;
           esac
        done


    - To test the command-line options:

        # Invalid option
        $ ./doUpdates -x
        Error: Invalid option.

        # Reboot option
        $ ./doUpdates -r



- Check For Updates

    - Now, we want to see if updates are available and whether a reboot is needed.

      We need to add this variable:

          UpdatesFile = "/tmp/updates.list"

      We can also remove this fragment:

          if [ $Check == 1 ]
          then
             # Check for updates
             dnf check-update
          fi


    - We will now add this just after the option processing code:

        ############################################
        # Are updates available?  Just quit with message if not.
        # RC from dnf check-update = 100 if available and 0 if none available.
        # One side effect is to create list of updates that can be searched for
        # items that trigger a reboot.
        ############################################
        dnf check-update > $UpdateFile
        UpdatesAvailable=$?

        if [ $UpdatesAvailable === 0 ]
        then
           echo "Updates are NOT available for host $HOSTNAME at this time."
           exit
        else
           echo "Updates ARE available for $HOSTNAME."
           if [ $Check ==1 ]
           then
              exit
           fi
        fi    



- Is a Reboot Required?

    - Here we check to see if any of the packages that typically need a reboot are being
        updated.  

        # Does the update include a new kernel
        if grep ^kernel $UpdatesFile > /dev/null
        then
           NeedsReboot=1
           echo "Kernel update for $HOSTNAME."
        fi

        # Is there a new glibc
        if grep ^glibc $UpdatesFile > /dev/null
        then
           NeedsReboot=1
           echo "glibc update for $HOSTNAME."
        fi

        # Is there a new systemd
        if grep ^systemd $UpdatesFile > /dev/null
        then
           NeedsReboot=1
           echo "systemd update for $HOSTNAME."
        fi

        # Temporary exit
        exit


    - Now, we add the reboot logic to the bottom of the code:

        # Reboot if necessary
        if [ $NeedsReboot == 0 ]
        then
           echo
           echo "############################################"
           echo "A reboot is not required."
           echo "############################################""
           echo
        elif [ $doReboot == 1 ] && [ $NeedsReboot == 1 ]
        then
           reboot
        elif [ $doReboot == 0 ] && [ $NeedsReboot == 1 ]
        then
           echo
           echo "############################################"
           echo "A reboot is needed."
           echo "Be sure to reboot at the earliest opportunity."
           echo "############################################"
           echo
        else
           echo
           echo "############################################"
           echo "An error has occurred and I cannot determine"
           echo "whether to reboot or not. Intervention is required."
           echo "############################################"
           echo
        fi



- Shell Functions

    - Shell functions (aka procedures or subroutines) are lists of Bash statements that are
        stored in the shell environment and which can be executed like any other command.
        The syntax of a function is:

        FunctionName(){list}


    - To create a simple function:

        # Create a function
        $ hw(){ echo "Hi there kiddo"; }

        # Call the function
        $ hw
        Hi there kiddo

        
        # List all currently defined functions
        $ declare -f | less

        <snip>
        hw ()
        {
            echo "Hi there kiddo"
        }
        <snip>


        # Unset the function since we don't need it any more and verify it's gone
        $ unset -f hw ; hw
        bash: hw: command not found



- Adding a Help Function

    - Now, we can add our help function:

        ############################################
        # Help function
        ############################################
        Help()
        {
           echo "doUpdates"
           echo ""
           echo "Installs all available updates from Fedora repositories.  Can reboot"
           echo "after updates if certain packages are updated.  Those packages are:
           echo ""
           echo "1. The kernel"
           echo "2. glibc"
           echo "3. systemd"
           echo ""
           echo "Syntax: doUpdates [-c|h|r]"
           echo "Options:"
           echo "-c   Check whether updates are available and exit."
           echo "-h   Print this Help and exit."
           echo "-r   Reboot if specific trigger packages are updated"
           echo ""
        }


    - And, we need to add another case to our options:

        # Get the options
        while getopts ":hcr" option; do
           case $option in
              c)  # Check option
                    Check=1;;
              h)  # Help function
                    Help
                    exit;;
              r)  # Reboot option
                    doReboot=1;;
             \?)  # Incorrect option
                    echo "Error: Invalid option."
                    exit;;
           esac
        done


    - To see the help information:

        # Get help for script
        ./doUpdates -h



- Finishing the Script

    - We need to remove these 2 lines:

        # Temporary exit
        exit

      And replace them with:

        # Perform the update
        dnf -y update


    - The full script is included in the /zero-to-sysadmin/scripts folder.



- About Testing

    - Testing procedures include:

        1. Create a simple test plan
        2. Start testing at the beginning of development
        3. Perform a final test when the code is complete
        4. Move to production and test more


    - Though it is discouraged, testing in production is inevitable.  This is because you
        can never fully recreate the production environment in your test environment.  The
        production tests should not be the only tests, though!


    - Fuzzy testing is a new buzzword often heard.  It means dealing with randomness in all
        aspects of the test, such as:

          - starting conditions
          - very random input
          - random combinations of options selected
          - low memory
          - high levels of CPU contention
          - multiple instances of the program running at the same time
          - and any other random combination you can think of


    - Since we are testing this using our VM, we can test the same conditions over and over 
        by taking a VM snapshot, running the test, then restoring to the snapshot and testing
        again.


    - BATS is a tool designed for automated testing of bash programs.



- Licensing

    - One of the best ways for us to give back to the open source community is to open source
        our own programs and scripts with an open source license.  We should include the GPLv2
        (or other preferred) license statement header as a command-line option that will 
        print out the license to the console.


    - Add a function to print the GPL license:

        ################################################################################
        # Print the GPL license header                                                 #
        ################################################################################
        gpl()
        {
           echo
           echo "################################################################################"
           echo "#  Copyright (C) 2007, 2016  David Both                                        #"
           echo "#  Millennium Technology Consulting LLC                                        #"
           echo "#  http://www.millennium-technology.com                                        #"
           echo "#                                                                              #"
           echo "#  This program is free software; you can redistribute it and/or modify        #"
           echo "#  it under the terms of the GNU General Public License as published by        #"
           echo "#  the Free Software Foundation; either version 2 of the License, or           #"
           echo "#  (at your option) any later version.                                         #"
           echo "#                                                                              #"
           echo "#  This program is distributed in the hope that it will be useful,             #"
           echo "#  but WITHOUT ANY WARRANTY; without even the implied warranty of              #"
           echo "#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #"
           echo "#  GNU General Public License for more details.                                #"
           echo "#                                                                              #"
           echo "#  You should have received a copy of the GNU General Public License           #"
           echo "#  along with this program; if not, write to the Free Software                 #"
           echo "#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   #"
           echo "################################################################################"
           echo
        }


    - And add it to our command-line options:

        g)  # Display GPL
              gpl
              exit



- Security

    - This script should only run as root, and we have set the permissions and added a check in
        the script to ensure it.  

      We will also put the script in /root/bin, which means it is available at all times, but is
        not accessible to non-root users.


        # Create the /root/bin directory (not created by default) and run script
        [root@studentvm1 ~]# cd ; mkdir bin ; mv doUpdates bin ; doUpdates -h



- Additional Levels of Automation

    - Now that we have our script, and we have copied it to /root/bin on all of our computers,
        we can just log onto each of our hosts at a specific time and run it.

      Or, we could use SSH to login and run the command remotely.


        # Run the script remotely
        $ ssh hostname doUpdates -r


    - Assuming we have SSH public/private key pairs in use (and thus don't have to enter a pw),
        we can update each of the hosts we need to update in a loop.

        # Run on several hosts
        $ for I in host1 host2 host3 ; do ssh $I doUpdates -r ; done


    - We could keep the list of hostnames in a .conf file.

        /usr/local/bin/doit
        -----------------------------
        #!/bin/bash
        for I in `cat /usr/local/etc/doit.conf` ; do ssh $I doUpdates ; done

        /usr/local/etc/doit.conf
        -----------------------------
        list of hostnames...
        one per line...
-----------------------------------------------------------
CHAPTER 9 - COMMAND LINE PROGRAMMING
-----------------------------------------------------------

- Output to the Display

    - The 'echo' command prints data to the screen.  

        # Print home directory
        $ echo "My home directory." ; ls

        # The -e flag enables escape sequences
        $ echo "FirstLine.\nSecondLine"


    - The 'printf' command (print formatted) command allows more complex formatting.  The command
        can also use all the C printf specs, so there are a ton of built-in formatting options.

        # Escape sequences work
        $ printf "FirstLine.\nSecondLine"

        # Get details about C spces
        $ man 3 printf



- Variables

    - Variables are assigned without a $, but they are accessed with a $.

        # Set and print variable
        $ echo $MyVar ; MyVar="Hello World" ; echo $MyVar

        # Variables can be unset and returned to a null value
        $ unset MyVar

        # String variables can be combined in various ways
        $ Var1="Hello World!" ; Var2="Welcome to Bash CLI programming."
        $ printf "$Var1\n$Var2\n" ;


    - Bash can perform basic integer math:

        # Basic integer math
        $ Var1="7" ; Var2="9" ; echo "Result = $((Var1∗Var2))"
        Result = 63


- Control Operators

    - Return Codes

        - Every bash statement generates a return code.

            # Check return code of last command run with $? operator
            $ ll ; echo "RC = $"
            ...
            RC = 0


            # Nonzero return code means command was unsuccessful
            $ ll /root ; echo "RC = $?"
            ls: cannot open directory '/root': Permission denied
            RC = 2


    - The Operators

        - The ; operator allows multiple statements on a single line.  A semicolon on the last
            statement can beither implicit or explicit.


        - The && operator runs the second command only if the first is successful.

            # Create dirctory and file
            $ Dir=chapter9
            $ mkdir $Dir/subdirectory && touch $Dir/subdirectory/testfile


        - The || operator runs the second command only if the first is unsuccessful.

            # Handle unsuccessful command
            $ Dir=chapter9
            $ mkdir $Dir/subdirectory || echo "New file was not created."

            mkdir: cannot create directory ‘chapter9/subdirectory’: Permission denied
            New file was not created.


        - We can use && and || together to perform the sequence of statements we need to perform
            and handle errors.

            # Use && and || together
            $ Dir=chapter9
            $ mkdir $Dir/subdirectory && \
               touch $Dir/subdirectory/testfile || \
               echo "New file was not created."



- The if Statement

    - The syntax for the 'if' statement is:

        if condition1; then list1; [ elif condition2; then list2; ] ... [ else list3; ] fi



- true and false

    - The 'true' command always produces a return code of 0, and the 'false' command always
        produces a return code of 1.

        # Return code 0
        $ true ; echo $?
        0

        # Return code 1
        $ false ; echo $?
        1

        # 'true' with operators
        $ true && echo "True" || echo "False"
        True

        # 'false' with operators
        $ false && echo "True" || echo "False"
        False



- Logical Operators

    - The functional syntax of these comparison operators is 1 or 2 arguments with an 
        operator that are placed within square braces.  We have a 'list' of program
        statements that are executed if the statement is true, and an optional list
        of program stratements if the condition is false.

        # If only
        if [ arg1 operator arg2 ] ; then list

        # If/else
        if [ arg1 operator arg2 ] ; then list ; else list ; fi


    - The square braces are the traditional Bash symbols that are equivalent to the   
        'test' command.  

        # If only
        if test arg1 operator arg2 ; then list


    - There is also a more recent double square bracket syntax that has a few 
        advantages.

        # If only
        if [[ arg1 operator arg2 ]] ; then list



- File Operators

    Operators
    ----------------------------------------------------------------------------------------
    -a filename            True if file exists
    -b filename            True if file exists and is block special file (ie /dev/sda1)
    -c filename            True if file exists and is character special file (ie /dev/TTY1)
    -d filename            True if file exists and is a directory
    -e filename            True if file exists (same as -a)

    -f filename            True if file exists and is regular file
    -g filename            True if file exists and is set-group-id, SETGID
    -h filename            True if file exists and is symbolic link
    -k filename            True if file exists and its sticky bit is set
    -p filename            True if file exists and is a named pipe (FIFO)

    -r filename            True if file exists and is readable (has read bit set)
    -s filename            True if file exists and has size greater than zero
    -t fd                  True if file descriptor fd is open and refers to a terminal
    -u filename            True if files exists and its set-user-id bit is set
    -w filename            True if file exists and is writable
    -x filename            True if file exists and is executable

    -G filename            True if file exists and is owned by the effective group id
    -L filename            True if file exists and is a symbolic link
    -N filename            True if file exists and has been modified since it was last read
    -O filename            True if file exists and is owned by effective user id
    -S filename            True if file exists and is a socket

    file1 -ef file2        True if file1 and file2 refer to the same device and inode number
    file1 -nt file2        True if file1 is newer, or if file1 exists and file2 does not
    file1 -ot file2        True if file1 is older, or if file2 exists and file1 does not



- File Operator Examples

    - To check for the existence of a file:

        # Check whether a file exists
        $ File="cpuHog"
        $ if [ -e $File ] ; then echo "The file $File exists." ; fi

        # This does the same thing
        $ if [[ -e $File ]] ; then echo "The file $File exists." ; fi

        # This also does the same thing
        $ if test -e $File ; then echo "The file $File exists." ; fi


    - To also handle the case in which the file does not exist:

        # Print message whether file exists or not
        $ File="cpuHog"
        $ if [ -e $File ] ; then echo "The file $File exists." ; \
            else echo "The file $File does not exist." ; fi


    - To check whether a file exists and is nonempty:

        # Check if file is non-empty
        $ File="Exp-9-7"
        $ if [ -s $File ] ; then echo "$File exists and contains data." ; fi

    
    - We can add the 'elif' block to discriminate between a file that doesn't exist and one
        that is empty:

        # Check whether file exists and whether it is empty
        $ File="Exp-9-7" ; touch $File
        $ if [ -s $File ] ; then echo "$File exists and contains data." ; \
            elif [ -e $File ] ; then echo "$File exists and is empty." ; \
            else echo "$File does not exist." ; fi



- Example - Formatted Bash Script

    #!/bin/bash

    File='Exp-9-7'
    echo "This is $File" > $File
    if [ -s $File ]
       then
       echo "$File exists and contains data."
    elif [ -e $File ]
       then
       echo "$File exists and is empty."
    else
       echo "$File does not exist."
    fi



- String Comparison Operators

    Operators
    --------------------------
    -z string          True if length is zero
    -n string          True if length is non-zero

    str1 == str2       True if strings are equal
    or                   - Second form should be used with test command
    str1 = str2          - When used with [[ command, performs pattern matching

    str1 != str2       True if strings are not equal

    str1 < str2        True if str1 sorts before str2 lexicographically

    str1 > str2        True if str1 sorts after str2 lexicographically



- String Operator Examples

    # Test if string length is zero
    $ MyVar="" 
    $ if [ -z "$MyVar" ] ; then echo "MyVar is zero length." ; else echo "MyVar contains data" ; fi

    # Test if string length is nonzero
    $ MyVar="Random text" 
    $ if [ -n "$MyVar" ] ; then echo "MyVar contains data." ; else echo "MyVar is zero length" ; fi


    # Get string length
    $ MyVar="" ; expr length "$MyVar"
    0

    $ MyVar="How long is this?" ; expr length "$MyVar"
    17


    # Test for String Equality
    $ Var1="Hello World" ; Var2="Hello World" 
    $ if [ "$Var1" == "$Var2" ] ; \
        then echo "Var1 matches Var2" ; \
        else echo "Var1 and Var2 do not match." ; fi



- Numerical Comparison Operators

    Operators
    --------------------------
    arg1 -eq arg2      Equal
    arg1 -ne arg2      Not equal

    arg1 -lt arg2      Less than
    arg1 -le arg2      Lest than or equal to

    arg1 -gt arg2      Greater than
    arg1 -ge arg2      Greater than or equal 



- Numerical Operator Examples

    # Numerical comparison
    $ X=1 ; if [ $X -eq 1 ] ; then echo "X equals 1" ; fi
    X equals 1

    # Does the same thing
    $ [ $X == 1 ]


    # The ! operator can be used to invert comparisons
    $ X=0
    $ if ! [ $X -eq 1 ] ; then echo "X does not equal 1" ; else echo "X equals 1" ; fi
    X does not equal 1



- Miscellaneous Operators

    Operators
    -----------------------------------------------------------------
    -o optname         True if shell option 'optname' is enabled
    -v varname         True if shell variable 'varname' is set
    -R varname         True if shell variable 'varname' is set and is name reference


    # Check whether a variable has been set
    $ Var1="Hello World" ; echo $Var1 
    $ if [ -v Var1 ] ; \
        then echo "Var1 has been assigned a value." ; \
        else echo "Var1 does not have a value." ; fi
    Hello World
    Var1 has been assigned a value.

    # Unset a variable
    $ unset Var1 ; echo $Var1
    $ if [ -v Var1 ] ; \
        then echo "Var1 has been assigned a value." ; \
        else echo "Var1 does not have a value." ; fi
    Var1 does not have a value.



- Grouping Program Statements

    - The 'time' utility shows us the amount of real time, running time, and system time.

        Real time = amount of clock time used by a program
        User time = amount of time spent executing user code
        System time = amount of time executing system code


    - Time Example

        # Time a progran
        $ time cat dmesg.txt

        <snip>
        [40368.982838] IPv6: ADDRCONF(NETDEV_UP): enp0s3: link is not ready
        [40371.049241] e1000: enp0s3 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
        [40371.049584] IPv6: ADDRCONF(NETDEV_CHANGE): enp0s3: link becomes ready
        real    0m0.026s
        user    0m0.001s
        sys     0m0.002s

        Note that the other 0.023s were spent waiting for I/O.


        # If we run this command a bunch of times, the results will be cached in disk
        real    0m0.007s
        user    0m0.001s
        sys     0m0.001s


        # But if we redirect output to /dev/null
        $ time cat dmesg.txt > /dev/null
        real    0m0.002s
        user    0m0.001s
        sys     0m0.000s

        This is because the time spent sending the result to the display takes all the time!


    - Shredding a Storage Device

       Here, we'll shred an entire storage device, including the boot record and partition table.

       # This will give us times for the shred command only
       $ time shred -vn 3 /dev/sdd ; dd if=/dev/sdd of=/dev/null

       # This will give us the times for the entire operation
       $ time ( shred -vn 3 /dev/sdd ; dd if=/dev/sdd of=/dev/null )



- Expansions

    - Brace Expansion

        - Brace expansion is used for generating arbitrary strings.

        - It was discussed in detail in Volume 1, Chapter 15

            # Brace expansion in the middle of a string
            $ echo b{ed,olt,ar}s
            beds bolts bars


    - Tilde Expansion

        - The ~ operator points to the full home directory of the current user.

            # Print home directory
            $ ~

            # Create new subdirectory of home folder
            $ echo ~/Documents
            /home/student/Documents


    - Pathname Expansion

        - Pathname expansion is also known as 'file globbing' with ? and *.

        - It was also discussed in detail in Volume 1, Chapter 15

            # File globbing
            $ ls Do*


    - Command Substitution

        - Command substitution is a form of expansion.  It allows the STDOUT data stream of one
            command to be used as the argument of another command.  For example, it can be used
            to process a list of items in a loop.

        - There are 2 forms of this substitution:

            `command`
            $(command)


            # Simple command substition
            $ echo "Todays date is `date`"
            Todays date is Sun Apr  7 14:42:46 EDT 2019
            [student@studentvm1 testdir7]$ echo "Todays date is $(date)"
            Todays date is Sun Apr  7 14:42:59 EDT 2019

            # Process a list of numbers
            $ echo `seq 5`
            1 2 3 4 5

            # Create a bunch of empty files
            $ for I in $(seq -w 5000) ; do touch file-$I ; done



    - Arithmetic Expansion

        - Bash does basic integer math, but it is cumbersome.  The syntax for arithmetic expression
            is $((arithmetic-expression))

            # Basic Arithmetic
            $ echo $((1+1))
            2

            $ Var1=5 ; Var2=7 ; Var3=$((Var1∗Var2)) ; echo "Var 3 = $Var3"
            Var 3 = 35



- for Loops

    - The syntax of the for loop in bash is:

        for var in list1 ; do list2 ; done

    - The values in 'list1' can be an explicit string of values or the result of a command
        substition.

        # String of values
        $ for I in a b c d 1 2 3 4 ; do echo $I ; done


        # More complex strings
        $ for Dept in "Human Resources" Sales Finance "Information Technology" Engineering \
            Administration Research ; do echo "Department $Dept" ; done
        Department Human Resources
        Department Sales
        Department Finance
        Department Information Technology
        Department Engineering
        Department Administration
        Department Research


        # Multiple commands (and directories are single word now)
        $ for Dept in Human-Resources Sales Finance Information-Technology Engineering \
            Administration Research ; \
            do echo "Working on Department $Dept" ; mkdir "$Dept"  ; \
            done



- Example - Generating a List of Installed Packages

    - Let's say we want to generate a list of all installed rpm packages and a description of each
        package.

        # Get list of packages
        $ rpm -qa | sort | uniq


        # Print all details of each package in a loop
        $ for RPM in `rpm -qa | sort | uniq` ; do rpm -qi $RPM ; done


        # Get just name and summary
        for RPM in `rpm -qa | sort | uniq` ; do rpm -qi $RPM ; done | egrep -i "^Name|^Summary"

        Name        : a2ps
        Summary     : Converts text and other types of files to PostScript
        ...


        # Save the results to a file
        $ for RPM in `rpm -qa | sort | uniq` ; \
            do rpm -qi $RPM ; done | egrep -i "^Name|^Summary" \

        Name        : a2ps
        Summary     : Converts text and other types of files to PostScript



- Other Loops

    - while Loops

         The while loop syntax is:

            while [ expression ] ; do list ; done 


          # Run forever
          #   (Notice that bash has postfix/prefix incrementers/decrementers) 
          $ X=0 ; while [ true ] ; do echo $((X++)) ; done | head

          # Changing condition
          $ X=0 ; while [ $X -le 5 ] ; do echo $((X++)) ; done



    - until

        - Until is the inverse of while.  It executes until the condition evaluates to true.

            until [ expression ] ; do list ; done


        # Run forever
        $ X=0 ; until false  ; do echo $((X++)) ; done | head

        # Changing condition
        $ X=0 ; until [ $X -eq 5 ]  ; do echo $((X++)) ; done
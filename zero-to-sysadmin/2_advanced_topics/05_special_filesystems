-----------------------------------------------------------
CHAPTER 5 - SPECIAL FILESYSTEMS
-----------------------------------------------------------

- The /proc Filesystem

    - The /proc and /sys filesystems are used by the kernel to store the performance data
        of the running kernel and more.  The data is always there and is easy to access.  

      These are virtual filesystems that exist only in RAM while the Linux host is running.
        They do not exist on physical disk.  They are recreated each time the computer boots.


    - The /proc filesystem is defined by the FHS as the location for Linux to store information
        about the system, kernel, and all processes running on the host.  

      It is also designed to provide access to view kernel config parameters and to modify many
        of them when necessary in order to allow the SysAdmin to tune the system without
        rebooting.


    - If we look in the /proc directory, we'll see a lot of numeric entries, each of which is a
        PID.  It also contains lots of named files, each of which gives information about
        the system.

        # List pids and information files
        $ ll /proc

        1
        12
        100
        ...
        acpi
        asound
        bus
        ...


    - The 'cpuInfo' file is mostly static.  It contains information about all installed CPUs.

        # View installed cpus
        $ cat cpuinfo


    - The 'meminfo' file contains information about memory.  The 'free' command reads this file
        and displays a few summary statistics.

        # View all memory info
        $ cat meminfo

        # View some statistics from meminfo files
        $ free



- Looking at Individual Processes in /proc

    - Now, we'll look a little deeper into the individual process entries in /proc.

        # Navigate into individual pid
        $ cd /proc/1

        # Look at the 'cmdline' file
        $ cat cmdline
        /usr/lib/systemd/systemd--switched-root--system--deserialize24

      As we can see, pid 1 is always 'systemd'.


    - Now, we can start an instance of 'cpuHog', navigate to it's pid:

        # Look in our pid's directory
        $ cd /proc/18107 ; ll | less

        total 0
        dr-xr-xr-x. 2 student student 0 Feb 11 20:29 attr
        --w-------. 1 student student 0 Feb 11 20:29 clear_refs
        -r--r--r--. 1 student student 0 Feb 11 20:29 cmdline
        -rw-r--r--. 1 student student 0 Feb 11 20:29 comm
        -rw-r--r--. 1 student student 0 Feb 11 20:29 coredump_filter
        -r--r--r--. 1 student student 0 Feb 11 20:29 cpuset
        lrwxrwxrwx. 1 student student 0 Feb 11 20:29 cwd -> /home/student
        -r--------. 1 student student 0 Feb 11 20:29 environ
        lrwxrwxrwx. 1 student student 0 Feb 11 20:29 exe -> /usr/bin/bash
        dr-x------. 2 student student 0 Feb 11 20:29 fd
        <snip>

      Note that the 'cwd' entry points to the current working directory, and the 'exe' entry
        points to the executable file for the bash process, which is the bash shell.


    - If we need to find the pid of a process, and there are multiple processes with the same
        name, we can use the 'pstree' command.

        # Show the entire process tree
        $ pstree



- Example - Using IP Forwarding

    - Linux is very flexible, and can do many interesting things.  For instance, any Linux
        host with multiple NICs can act as a router.  All it takes is a little knowledge, 
        a simple command, and some changes to the firewall.


    - Routing is a task managed by the kernel.  So to turn it on or off, we need to change a
        kernel config parameter.  But we don't even need to reboot to do this!

        # Check whether IP forwarding is on
        $ cd /proc/sys/net/ipv4 ; cat ip_forward
        0

        # Turn IP forwarding on
        $ echo 1 > ip_forward ; cat ip_forward
        1


    - Next, we would need to update the 'iptables' firewall and the routing table.  Those
        changes would define the specifics of which packets get routed where.



- The /sys Filesystem

    - The /sys directory maintains a list of hardware hierarchically for each bus type in the
        computer hardware.  

        # Look at contents of /sys directory
        $ cd /sys
        $ ls

        block  bus  class  dev  devices  firmware  fs  hypervisor kernel module power


    - The /sys/block directory has different types of disk (block) devices, and the 'sda' device
        is one of them.  

        # List the contents of /sys/block/sda
        $ ls block/sda

        alignment_offset   events_async       queue      slaves
        bdi                events_poll_msecs  range      stat
        capability         ext_range          removable  subsystem
        dev                holders            ro         trace
        device             inflight           sda1       uevent
        discard_alignment  integrity          sda2
        events             power              size


        # Get the device major and minor numbers
        $ cat block/sda/dev
        8:0


        # Get other information about device
        $ ls block/sda/device
        $ cat block/sda/device/model
        $ cat /sys/block/sda/device/model


    - The 'smartctl' command will show us the same information these files do, and more.
        It obtains this information from the /sys filesystem.

        # List information about device
        $ smartctl -x /dev/sda



- Example - Getting USB Information

    - The /sys filesystem also contains data about the PCI and USB system bus hardware and any
        attached devices.  

        # Get information about usb devices
        $ ls /sys/bus/usb/devices/usb2


    - The 'lsusb' command can also be used to get summary information about attached usb devices.

        # Get summary information about usb devices
        $ lsusb


    - The 'lspci' command can be used to get summary information about attached pci devices.

        # Get summary information about pci devices
        $ lspci



- Swap Space

    - Swap space is used to increase the amount of virtual memory available to a host.  It can 
        use one or more dedicated swap partitions or a swap file on a regular filesystem or
        logical volume.


    - The kernel uses a memory management program that locates blocks (aka pages) of memory in 
        which the contents have not been used recently.  The memory management program swaps 
        these infrequently used blocks onto a special partition on the hard drive used for
        paging.  


    - Linux supports up to 32 swap areas, any or all of which can be online at the same time.
        A swap area can be a disk partition, logical volume, or a file.


    - There are 2 types of swap area, partitions (or volumes) and files.  Most Linux systems
        create a swap partition or volume.  A standard partition can be designated as swap space
        with the 'mkswap' command.  

      A file can be used if there is no free space that can be used, but this is not normally
        recommended.  However, it may make sense on systems that have so much RAM it never 
        fills up.


    - Thrashing can occur when total virtual memory (RAM and swap space) become nearly full.
        The system will become completely unresponsive or quite slow.  



- Adding More Swap Space on a Non-LVM Disk Partition

    - It may become necessary to modify the amount of swap space defined for a system due to
        changing requirements.  The basic steps to take are:

        1. Turn off the existing swap space.
        2. Create a new swap partition of the desired size.
        3. Re-read the partition table.
        4. Configure the partition as swap space.
        5. Add the new partition/etc/fstab.
        6. Turn on swap.


    - For safety sake, before turning off swap, at the very least you should ensure no applications
        are running and no swap space is in use with the 'free' or 'top' commands.

        # Turn off all swap space
        $ swapoff -a

        # Find the current swap partition and look for a partition to create new swap partition
        $ lsblk -i

        # We'll use /dev/sdd1 for our additional swap space
        # Start fdisk in interactive mode
        $ fdisk /dev/sdd


        # Create new partition with fdisk
        Command: t       # Specify partition type

        Hex code (type L to list all codes): L
        ...
        82  Linux swap / So
        ...

        Command: p       # Creates partition

        Command: w       # Writes changes to partition table


        # Verify that new swap partition exists
        $ fdisk -l /dev/sdd

        # Now, define the partition as a swap partition
        $ mkswap /dev/sdd1

        # Finally, turn swap back on
        $ swapon -a



- Adding Swap to an LVM Disk Environment

    - If our disk setup uses LVM, adding swap space is fairly easy.  By default, LVM creates a
        swap partition during installation.  So, we can just resize the swap partition.  The
        basic steps in this case are:

        1. Turn off all swap.
        2. Add a new hard drive or SDD if necessary.
        3. Prepare the new device if one was installed, and extend the volume group.
        4. Increase the size of the logical volume designated for swap.
        5. Configure the resized volume as swap space.
        6. Turn on swap.


    - To increase the swap space:

        # Verify swap exists in a logical volume
        $ lvs

        # Verfiy there is space available to extend the swap volume
        $ vgs

        # Find the swap device we want to turn off (either of these will work)
        $ cat /proc/swaps
        $ swapon -s


        # Turn off swap 
        $ swapoff /dev/dm-1 ; cat /proc/swaps

        # Increase the size of the logical volume
        $ lvextend -L +2G /dev/mapper/fedora_studentvm1-swap

        # Verify the volume was resized
        $ lvs


        # Turn the entire partition into swap space
        $ mkswap /dev/mapper/fedora_studentvm1-swap

        # Turn swap back on and verify it is on
        $ swapon -a
        $ cat /proc/swaps
-----------------------------------------------------------
CHAPTER 11 - TIME AND AUTOMATION
-----------------------------------------------------------

- Time in Computers

    - Timekeeping is very important to computer networks.  In banking, stock markets, and other
        financial businesses, transactions must be maintained in proper order and exact time
        sequences are important for that.


    - In even the slowest modern Linux computers, we debug by looking at transaction logs with 
        timestamps that resolve down to the nanosecond.

      In very high-volume transaction environments, the difference between a few microseconds
        might require you to look through thousands of transactions.



- Keeping Time with Chrony

    - The NTP Server Hierarchy

        - NTP (Network Time Protocol) is used by computers worldwide to synchronize their times
            with internet standard reference clocks via a hierarchy of NTP servers.

            Stratum 0  =  atomic clocks, radio receivers tuned to atomic clock signals, or GPS
                            receivers using GPS satellite signals

            Stratum 1  =  connected to Stratum 0 via satellite, radio, or modems over phone lines

            Stratum 2  =  several thousand publicly available and open for all to use

            Stratum 3  =  local time servers that communicate with Stratum 2 and in local network


    - NTP Choices

        - The original ntp daemon 'ntpd' has been joined by a newer one, 'chronyd'.  Both perform 
            the task of of keeping the time of the localhost synchronized with the time server,
            and both are available and don't seem to be going anywhere.


        - Some of the primary advantages of Chrony are:

            - It can synchronize much faster than ntp.  It's good for laptops or desktops that don't
                run frequently.

            - It can compensate for fluctuating clock frequencies (ie when a host hibernates or enters
                a sleep mode).

            - It can handle intermittent network connections and bandwidth saturation.

            - It adjusts for network delays and latency.

            - After the initial time sync is accomplished, Chrony never stops the clock.  This ensures
                stable and consistent time intervals.

            - It can even work without a network connection of any type (if it is updated maunally).


    - Chrony Structure

        - The chrony daemon, 'chronyd', runs in the background and monitors the time and status
            of the time server specified in the 'chrony.conf' file.  

          If the local time needs to be adjusted, chronyd does so smoothly without the jolt that 
            would occur if the clock was suddenly set to a new time.


        - Chrony also provides the 'chronyc' tool that allows us to monitor the current status of
            Chrony and to make changes if necessary.  It can be used as a command that accepts
            sub-commands or as an interactive tool.


    - Client Configuration

        - The NTP client config is simple and requires little or no change.

        - The NTP server can be defined by SysAdmins during Linux installation, or it can be
            provided by the DHCP server at boot time.  Many of the various Linux distros have
            their own sets of time servers.


            # Get statistics about how far off the local system is from the reference server
            $ chronyc tracking

            # Get list of closest time sources
            $ chronyc sources

            # Include descriptions of all the fields
            $ chronyc sources -v


        - If we want our own server to be the preferred reference time source for a host, we would
            add this line to the /etc/chronyc.conf file:

            server 192.168.0.51 iburst prefer

          The 'prefer' markds this as the preferred reference source, so it will always be used if
            it is available.


        - By default, Ubuntu uses 'timedatectl' / 'timesyncd' to synchronize time, and users can
            optionally use chrony.


    - Chronyc as an Interactive Tool

        - chronyc can also be used as an interactive tool:

            # Interactive mode
            $ chronyc



- Using cron for Timely Automation

    - The crond Daemon

        - The 'crond' daemon is a background service that enables cron functionality.

          The cron service checks for files in the /var/spool/cron and /etc/cron.d directories
            and the /etc/anacrontab file.  The contents of these jobs define cron jobs that
            are to be run at various intervals.

            /var/spool/cron   =   individual user cron files
            /etc/cron.d       =   cron files added by system services and applications
            /etc/anacrontab   =   special case


    - Crontab

        - Each user, including root, can have a crontab (chronos table) file.  The terms 
            'crontab file' and 'cron file' are used interchangeably.

          By default, no file exists, but using the 'crontab -e' command to edit a crontab
            file creates them in the /var/spool/cron directory.  Using this command is 
            recommended over editing the file directly, since it also restarts the crond
            daemon after the change is made.


            # Edit the crontab file, or create one if it doesn't exist
            $ crontab -e

            # Display crontab file contents
            $ crontab -l

            # Remove your current crontab file
            $ crontab -r

            # Remove your current crontab file, but prompt before removal
            $ crontab -i

            # Edit another user's crontab file (requires root privileges)
            $ crontab -u <username>


        - The individual jobs in the file have this format:

            * * * * * command(s)
            - - - - -
            | | | | |
            | | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
            | | | ------- Month (1 - 12)
            | | --------- Day of month (1 - 31)
            | ----------- Hour (0 - 23)
            ------------- Minute (0 - 59)


    - cron Examples

        - Each interval field of the crontab entries also supports lists and ranges of values as
            well as calculated values. 

            # Run a task on the 1st and 15th of every month, at 1AM
            00 01 * 1,15 * /usr/local/bin/mycronjob.sh

            # Run a task every 5 minutes
            */5 * * * * /usr/local/bin/mycronjob.sh

            # Run a task every 3 hours (3AM, 6AM, 9AM, ...)
            00 */3 * * * /usr/local/bin/mycronjob.sh


        - We can also do more complex scheduling.

            # Run a task on the first Sunday of every month (any of these will work)
            00 01 1-7 ∗ sun /usr/local/bin/mycronjob.sh
            00 01 1-7 ∗ 0 /usr/local/bin/mycronjob.sh
            00 01 1-7 ∗ 7 /usr/local/bin/mycronjob.sh

            # Same, but we only want to run in months June-September (any of these will work)
            00 01 1-7 jun,jul,aug,sept sun /usr/local/bin/mycronjob.sh
            00 01 1-7 6,7,8,9 0 /usr/local/bin/mycronjob.sh
            00 01 1-7 6-9 0 /usr/local/bin/mycronjob.sh


    - crontab Entries

        - This entry creates backups at 1:01AM every day.  There are 2 backups to 2 different
            locations.

            01 01 ∗ ∗ ∗ /usr/local/bin/rsbu -vbd1 ; /usr/local/bin/rsbu -vbd2


        - This entry sets the hardware clock on the computer using the system clock as the source 
            of an accurate time. It runs at 05:03AM every day.

            03 05 ∗ ∗ ∗ /sbin/hwclock --systohc

        - This entry is used to install Fedora updates at 04:25AM on the first day of each month. 
            The cron service has no option for “The last day of the month,” so we use the first day 
            of the following month.

            25 04 1 ∗ ∗ /usr/local/bin/doit



- /etc/cron.d

    - The directory /etc/cron.d is where some applications install cron files when there are
        no users under which the program can run.  The root user can also place crontab files
        in this directory.



- anacron

    - The crond service assumes that the host computer runs all the time.  What that means 
        is that if the computer is turned off, jobs scheduled during that time are ignored
        until they are next scheduled to run.


    - The anacron program performs the same function as crond, but it adds the ability to run
        jobs that were skipped if the computer was off.  This is especially useful for systems
        that get turned off regularly.

      As soon as the computer is turned on and booted, anacron checks to see whether any
        configured jobs have missed their last scheduled run.  If they have, they are run
        almost immediately.


    - The entries in the anacron files are identical to entries in crontab files.  We install
        them in the directories:

          /etc/cron.hourly
          /etc/cron.daily
          /etc/cron.weekly
          /etc/cron.monthly


    - For an example of how this works:

        - The crond service runs the cron job specified in /etc/cron.d/0hourly once an hour.
            It runs all of the scripts located in the /etc/cron.hourly directory.  

            # Run the hourly jobs
            01 * * * * root run-parts /etc/cron.hourly


        - The /etc/cron.hourly directory contains the '0anacron' script, which runs the anacron
            program using the /etdc/anacrontab config file.


        - The anacron program runs the jobs located in /etc/cron.daily once per day, the jobs
            located in /etc/cron.weekly once per week, and the jobs located in
            /etc/cron.monthly once per month.



- cron Security

    - There are a few security concerns when dealing with cron.  It's a good idea to prevent
        non-root users from creating cron jobs.  In fact, it's a better idea to deny use of
        the cron system to non-root users entirely.

      This can be accomplished using the 'cron.allow' and 'cron.deny' files.


        cron.allow           cron.deny           Effect
        -------------------------------------------------------------------
        Not present          Not present         Only root can use cron.

        Present but empty    Not present         Only root can use cron.

        Present              Not present         UserID must be listed in cron.allow to use cron.

        Not present          Present but empty   All non-root users can use cron.

        Not present          Present             Users listed in cron.deny are denied access to cron.



- The at Command

    - The tasks we have looked at so far run on a recurring basis.  The 'at' command can be used
        if a task just needs to be run once at some point in the future.  


        # Set up a job to run in the future
        $ at now +2 minutes
        warning: commands will be executed using /bin/sh
        at>  free
        at>  <EOT>
        job 1 at Thu May  2 15:06:00 2019


        # Display list of jobs scheduled to be run
        $ atq


        # Once our job has run, we can verify that the queue is now empty
        $ tail /var/log/cron


    - The 'at' command uses the files 'at.allow' and 'at.deny' to specify which users have access
        to the 'at' command.  The logic is the same as with 'cron.allow' and 'cron.deny'.
-----------------------------------------------------------
CHAPTER 3 - EVERYTHING IS A FILE
-----------------------------------------------------------

- What is a File?

    - In Linux, everything is a file.  That is, everything can be the source of a data stream, 
        the target of a data stream, or in many cases both.  This allows us to use common
        tools to operate on different things.


    - Here are some examples of things that are treated as files in Linux:

        Directories
        Shell scripts
        Running terminal emulators
        LibreOffice documents
        Serial ports
        Kernel data structures
        Kernel tuning parameters
        Hard drives – /dev/sda
        /dev/null
        Partitions – /dev/sda1
        Logical volumes (LVM) – /dev/mapper/volume1-tmp
        Printers
        Sockets



- Device Files

    - Device files are technically known as 'device special files'.  They are employed to provide
        the OS and user an interface to the devices they represent.  


    - All Linux device files are located in the /dev directory, which is an integral part of the
        root (/) filesystem, because they must be available to the OS in the early stages of the
        boot process.


    - Over the years, chaos overtook the /dev directory with huge numbers of mostly unneeded 
        devices.  The 'udev' daemon was created to simplify this problem.  

      In the past, device files were created at the time the OS was created.  This meant that all
        possible devices that could ever be used on the system had to be created in advance.  Tens
        of thousands had to be created to handle all the possiblities!
  


- udev Simplification

    - udev is designed to simplify this problem by creating entities in /dev only for those
        devices that currently exist at boot time or have a high probability of actually 
        existing on the host.  


    - In addition, udev assigns names to devices when they are plugged into the system.  In fact,
        udev treats all devices as plug and play, even at boot time.  This makes dealing with
        devices consistent whether at boot time or when they are plugged in later.


    - In modern versions of Fedora, udev stores its default naming rules in /usr/lib/udev/rules.d
        and local and config files in the /etc/udev/rules.d directory.  Using a consistent
        naming scheme makes the devices much easier to manage.

      However, these conventions have changed over time, which has led to some headaches.



- Device Data Flow

    - Here is an example of data flow for a simple command:

        $ cat /etc/resolv.conf

              
                    -->   cat /etc/resolv.conf  --
                    |                            |
                    |                            v
                Device file                  Device file
                    ^                            |
                    |                            v
                Device driver                Device driver
                    ^                            |
                    |                            v
                /dev/sda2                     /dev/pts/6
                Hard Drive                     BASH Shell


    - The device special files make it very easy to use standard streams (STDIO) and 
        redirection to access any and every device on a Linux computer.  Simply directing
        a data stream to a device file sends the data to that device.


    - It's important to remember that device special files are not device drivers.  They are
        gateways to device drivers.  Data is passed from an application or OS to the device 
        file, which passes it to the device driver, which passes it to the physical device.



- Device File Classification

    - Device files can be classified in at least 2 ways.  The first and most commonly used
        classification is that of the type of data stream commonly associated with the 
        device.

      For example, tty and serial devices are character-based, since the data stream is 
        transferred and handled one character (or byte) at a time.  Block-type devices such
        as hard drives transfer data in blocks, typically a multiple of 256 bytes.


    - To see which types we have in the /dev directory:

        $ ls -l /dev | less

                                    Major  Minor
        <snip>
        brw-rw----. 1 root    disk      8,   0 Jan 30 06:53 sda
        brw-rw----. 1 root    disk      8,   1 Jan 30 06:53 sda1
        brw-rw----. 1 root    disk      8,   2 Jan 30 06:53 sda2
        brw-rw----. 1 root    disk      8,  16 Jan 30 06:53 sdb
        brw-rw----. 1 root    disk      8,  17 Jan 30 06:53 sdb1
        brw-rw----. 1 root    disk      8,  18 Jan 30 06:53 sdb2
        brw-rw----. 1 root    disk      8,  19 Jan 30 06:53 sdb3
        brw-rw----. 1 root    disk      8,  32 Jan 30 06:53 sdc
        <snip>
        crw-rw-rw-. 1 root    tty       5,   0 Jan 30 06:53 tty
        crw--w----. 1 root    tty       4,   0 Jan 30 06:53 tty0
        crw--w----. 1 root    tty       4,   1 Jan 30 11:53 tty1
        crw--w----. 1 root    tty       4,  10 Jan 30 06:53 tty10
        crw--w----. 1 root    tty       4,  11 Jan 30 06:53 tty11
        crw--w----. 1 root    tty       4,  12 Jan 30 06:53 tty12
        <snip>

      The entries that begin with 'b' are block-type, and the entries that begin with 'c' are
        character-type.


    - The more detailed and explicit way to identify device files is using the device major
        and minor numbers.

      The disk drives have a major number of '8', which designates them as SCSI block devices.
        Note that ATA and SATA drives are managed by the SCSI subsystem, so they are included
        also.  They are referred to as 'sd[a-z]'.

      The minor numbers 8, 16, 24, ..., 240 are the whole disk numbers.  For instance,
        major/minor 8/16 represents the whold disk /dev/sdb.  8/17 is the device file for the
        first partition sdb/1.  Numbers 8/34 would be /dev/sdc2.

      The tty devices are numbered tty0-tty63.  



- Example - Sending Data with Device Files

    - Most Linux distros have virtual consoles that can be accessed with HostKey+F1...F7.

        # Switch to console 2
        HostKey+F2

        # Get the tty device connected to the console
        $ who am i
        student  tty2        2019-01-30 15:32

      This shows the date and time the user logged in.


    - Now, let's look at the tty2 and tty3 devices.

        # Look at listing of tty2 and tty3
        $ ls -l /dev/tty[23]
        crw--w----. 1 student tty 4, 2 Jan 30 15:39 /dev/tty2
        crw--w----. 1 root    tty 4, 3 Jan 30 06:53 /dev/tty3

      Notice the 'c' in the first column for character type.


    - Now, switch to console 3.

        # Switch to console 3
        HostKey+F3

        # Verify you are on console 3
        $ who am i
        student  tty3        2019-01-30 15:38

        # Send data to console 3
        $ echo "Hello world" > /dev/tty2

      Switch to console 2, and now "Hello world" should be displayed.


    - Now, return to the graphical desktop (HostKey+F1), and open 2 terminal emulator 
        sessions.

        # Determine which device file first terminal is connected to
        $ who am i
        student  pts/9        2017-10-19 13:21 (192.168.0.1)

      'pts' indicates it is a pseudo-terminal.

        # List the tasks being run on each terminal session
        $ w
        08:47:38 up 1 day, 20:12,  6 users,  load average: 0.11, 0.06, 0.01
        USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
        student  tty1      Wed12    2days 14.16s  0.06s /bin/sh /etc/xdg/xfce4/xinitrc -- vt
        root     pts/1     Thu17   10:50m  0.03s  0.03s /bin/bash
        root     pts/2     Thu17   15:18m  0.02s  0.02s /bin/bash
        root     pts/3     Thu17   10:48m  0.02s  0.02s /bin/bash
        student  pts/5    

        # Send some data to another terminal
        $ echo "Hello world" > /dev/pts/5



- Example - Sending A Document to a Printer

    - First, create a simple PDF file 'test.pdf' with LibreOffice.  

    - Now plug your USB printer into a USB port.  Then, look in /dev/usb for 'lp0', which is
        usually the default printer.  

    - Now, print the pdf document to the printer:

        # Print document
        $ cat test.pdf > dev/usb/lp0



- Example - Reading the Contents of RAM

    - The /dev/mem device special file through which direct access to memory can be achieved.
        Only the root user can read RAM, and no user can write to it.  

        # Dump the first 200K of RAM to STDOUT
        $ dd if=/dev/mem bs=2048 count=100

        # Make contents slightly more readable
        $ dd if=/dev/mem bs=2048 count=100 | od -c


    - Note that for security reasons, a user cannot access another user's memory space.  There
        are many malware attacks that depend on privilege escalation to read contents of memory
        that would not normally be readable.  



- Randomness, Zero, and More

    - The devices special files 'null', 'zero', 'random', and 'urandom' are not associated
        with any physical devices.


    - The /dev/null device special file is frequently used to prevent users from getting output
        that is confusing or irrelevant.  /dev/null simply returns an EOF (End of File) character.

        # Remove output from the data stream
        $ echo "Hello world" > /dev/null


    - The /dev/random and /dev/urandom devices are useful as data stream sources that produce 
        random output - not just numbers but any and all byte combinations.

      The /dev/urandom produces a deterministic stream of random output and is very fast.  The
        /dev/random produces a nondeterministic stream but is slower.

        # Display some random data
        $ cat /dev/urandom

        # Display 128 bytes of random octal data
        $ od /dev/urandom -N 128

        0000000 043514 022412 112660 052071 161447 057027 114243 061412
        0000020 154627 105675 154470 110352 135013 127206 103057 136555
        ...


    - The /dev/zero device file produces an unending string of zeros as output.  Note that
        these are octal zeros and not the ASCII character zero.

        # Display output from /dev/zero
        $ dd if=/dev/zero  bs=512 count=500 | od -c
        
        0000000  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0



- Back up the MBR


- Implications of Everything is a File
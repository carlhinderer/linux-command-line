-----------------------------------------------------------
CHAPTER 6 - REGULAR EXPRESSIONS
-----------------------------------------------------------

- Regular Expressions

    - The difference betwween 'basic regular expressions' and 'extended regular expressions' 
        is in the syntax used and how metacharacters are specified.  

      In basic regex's, the metacharacters '?', '+', '(', etc. lose their special meaning.  
        We have to use escape sequences like '\?', '\+', '(' must be used.



- The Mailing List

    - If we have to manage listservs, people will send us email addresses to add to the lists.
        For instance, we might get a word document with a bunch of addresses.  These addresses
        will most likely not use standard formatting.  They will have extra whitespace and empty
        lines.

        # Example email address file
        Team 1  Apr 3
        Leader  Virginia Jones  vjones88@example.com
        Frank Brown  FBrown398@example.com
        Cindy Williams  cinwill@example.com
        Marge smith   msmith21@example.com
         [Fred Mack]   edd@example.com

        Team 2  March 14
        leader  Alice Wonder  Wonder1@example.com
        John broth  bros34@example.com
        Ray Clarkson  Ray.Clarks@example.com
        Kim West    kimwest@example.com
        [JoAnne Blank]  jblank@example.com

        Team 3  Apr 1
        Leader  Steve Jones  sjones23876@example.com
        Bullwinkle Moose bmoose@example.com
        Rocket Squirrel RJSquirrel@example.com
        Julie Lisbon  julielisbon234@example.com
        [Mary Lastware) mary@example.com



- First Solution

    - As a lazy SysAdmin, we obviously want to automate the task.  We will create a Bash 
        program to produce an output file, 'addresses.txt'.

        # Download the example input file
        $ mkdir chapter6 ; ch chapter6
        $ wget https://raw.githubusercontent.com/Apress/linux-volume-2/master/Experiment_6-1.txt

        # Look at the example file
        $ cat Experiment_6-1.txt


    - To do some of the easier filtering:

        # Remove lines with the word 'Team' (-v for inverted or NOT)
        $ cat Experiment_6-1.txt | grep -v Team

        # Also remove the blank lines
        $ cat Experiment_6-1.txt | grep -v Team | grep -v "^\s*$"

        Leader  Virginia Jones  vjones88@example.com
        Frank Brown  FBrown398@example.com
        Cindy Williams  cinwill@example.com
        Marge smith   msmith21@example.com
         [Fred Mack]   edd@example.com
        leader  Alice Wonder  Wonder1@example.com
        John broth  bros34@example.com
        Ray Clarkson  Ray.Clarks@example.com
        Kim West    kimwest@example.com
        [JoAnne Blank]  jblank@example.com
        Leader  Steve Jones  sjones23876@example.com
        Bullwinkle Moose bmoose@example.com
        Rocket Squirrel RJSquirrel@example.com
        Julie Lisbon  julielisbon234@example.com
        [Mary Lastware) mary@example.com


    - Next, we need to get rid of the 'Leader' string.  We can use the 'sed' (stream editor) 
        command for this which will substitute a new string (a null string in our case) 
        for the pattern it matches.

        # Remove 'Leader'
        $ cat Experiment_6-1.txt | grep -v Team | grep -v "^\s*$" | sed -e "s/[Ll]eader//"


      In the sed command, 

        - The '-e' means the quote-enclosed expression is a script that produces a desired result
        - The 's' in the expression means that this is a substitution
        - The basic form of substitution is s/regex/replacment_string/
        - The [Ll] matches either L or l


    - Now, we'll get rid of extraneous characters like [] and ().

        # Remove extraneous characters [] and ()
        $ cat Experiment_6-1.txt | 
          grep -v Team | 
          grep -v "^\s*$" | 
          sed -e "s/[Ll]eader//" -e "s/\[//g" -e "s/]//g" -e "s/)//g" -e "s/(//g"


    - Now, we want to remove leading spaces from some of the lines.  We could use 'sed' for this,
        but the 'awk' command can do that as well as other fields if necessary, and add the <>
        characters around the email address.

      The awk utility is actually a very powerful programming language that can accept data stream
        on its STDIN.  This makes it extremely useful in command-line programs and scripts.

      The awk utility works on data fields and the default field separator is spaces (any amount
        of whitespace).  The data stream we have so far is 3 fields: first, last, and email.


        # This takes each of the 3 fields, extracts them without leading or trailing
        #   whitespace, then prints them with a single space between them and encloses
        #   the email address with <>.

        $ awk '{print $1" "$2" <"$3">"}'


    - Putting all of this together:

        # Extract email addresses
        $ cat Experiment_6-1.txt | 
          grep -v Team | 
          grep -v "^\s*$" | 
          sed -e "s/[Ll]eader//" -e "s/\[//g" -e "s/]//g" -e "s/)//g" -e "s/(//g" |
          awk '{print $1" "$2" <"$3">"}'



- Second Solution

    - In this example, to simplify the command-line program, we'll combine the 2 grep
        statements.

        # Combine grep statements
        $ cat Experiment_6-1.txt | grep -vE "Team|^\s*$"



- grep Data Flow

    - All implementations of grep are line-based.  A pattern created by a combination of one
        or more expressions is compared against each line in a data stream.  When a match is 
        made, an action is taken on that line as prescribed by the tool being used.


    - For example, when a pattern match occurs with grep, the usual action is to pass that line
        on to STDOUT and lines that do not match the pattern are discarded.  The -v option
        reverses those actions so that the lines with matches are discarded.



- grep Regex Building Blocks

    A-Z                 Literal characters
    a-z
    0-9

    .                   Matches any single character

    []                  Matches character in character list
    [A-Za-z]

    [:class name:]      Matches character in character class
    [:alpha:]
    [:space]

    ^                   Anchors
    $



- Simple grep Examples

    # Download sample file
    $ wget https://raw.githubusercontent.com/Apress/linux-volume-2/master/Experiment_6-3.txt


    # Get lines that end with 2 digits
    $ grep [0-9][0-9]$ Experiment_6-3.txt

    # Get lines that start with 'Lab Project' and end with a digit
    $ grep "^Lab Project" Experiment_6-3.txt | grep "[0-9]$"

    # Same, but using POSIX character class
    $ grep "^Lab Project" Experiment_6-3.txt | grep "[[:digit:]]$"


    # Get lines with 'systemd'
    $ grep systemd Experiment_6-3.txt

    # Get lines with 'systemd' case-insensitive and count words
    $ grep -i systemd Experiment_6-3.txt | wc


    # Get lines with '[' character (must escape it)
    $ grep -i "\[" Experiment_6-3.txt



- grep Regex Repetition

    ?          Zero or one occurrences of preceding character

    *          Zero or more occurrences

    +          One or more occurrences

    {n}        Exactly n occurrences

    {n,}       n or more occurrences

    {,m}       Zero to m occurrences

    {n,m}      n to m occurrences



- Other grep RegexMetacharacters

    \<         Matches empty string at beginning of word
                 ("\<fun" matches on 'fun' and 'Function' but not 'refund')

    \>         Matches space and punctuation at end of word
                 ("environment\>" matches 'environment' and 'environment,')

    ^          Negates a list of characters
                 ([^a-c] matches any character but 'a', 'b', or 'c')

    |          Logical or
                 ("Team|^\s*$" matches any line with 'Team' or empty line)

    ( and )    Logical and



- Extended grep Examples

    # Select all instances of 'drives' but not 'drive' or 'drivess'
    $ grep -Ei "\<drives\>" Experiment_6-3.txt


    # Search expressions to find 'tar' (-n will print line number)
    $ grep -Ei "tar" Experiment_6-3.txt
    $ grep -Ei "\<tar" Experiment_6-3.txt
    $ grep -Ein "\<tar\>" Experiment_6-3.txt


    # Search for 'shell script', 'shell program', or 'shell variable'
    $ grep -Eni "\<shell (script|program|variable)" Experiment_6-3.txt



- sed

    - grep can be used to create complex yet elegant search patterns.  However, it does
        not provide any direct capability to edit or modify contents of a line.

      The sed utility allows searching for a pattern, along with modifying, editing, or
        deleting the matched text.  


    - We want to consolidate our email address formatter.  It is possible to combine 4 of the
        5 sed expressions into a single expression, so our sed command now has 2 expressions
        instead of 5.

        # Combine sed expressions
        $ sed -e "s/[Ll]eader//" -e "s/[]()\[]//g"


    - Looking closer at "s/[]()\[]//g":

        \[    This character has to be escaped, since it is a metacharacter
        g     Globally, meaning all instances will be changed


    - Our complete transform script now looks like:

        # Format email addresses
        $ grep -vE "Team|^\s*$" Experiment_6-1.txt | 
          sed -e "s/[Ll]eader//" -e "s/[]()\[]//g" | 
          awk '{print $1" "$2" <"$3">"}'
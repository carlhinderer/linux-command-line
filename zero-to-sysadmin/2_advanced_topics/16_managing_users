-----------------------------------------------------------
CHAPTER 16 - MANAGING USERS
-----------------------------------------------------------

- The root Account

    - Many Linux systems today are essentially single-user systems.  Users do normal things
        under their own account, then switch to root when necessary.  This means normal
        users must still deal with 2 user accounts.

      Otherwise, multiple users may log into a server to complete various tasks.


    - The root account is present on all Linux computers, and it allows the person logged in 
        to read, change, and delete any file.  They can change file permissions.  They can
        change the passwords of other users.  

      The only person who should have the root password is the SysAdmin.



- Your Account

    - Your account can read and write files located in your home directory.  You cannot access
        other users' home directories, and you cannot alter system files.  


    - It is a common convention to create account names with the user's first initial and last
        name (ie 'jsmith').


    - When you create files in your home directory or any of it's subdirectories, they are 
        created with the permissions for your user to read and write them.



- User Accounts and Groups

    - User accounts and groups are the first line of security on a Linux computer.  


    - The root account is always UID 0 and the root group is always GID 0.

      UID/GID Range         Description
      ---------------------------------------------------------------
      0                     root
      1-99                  Historical system-level accounts
      100-999               Application-level users
      1000-4999             Human users
      5000-9999             Miscellaneous
      10000-65533           Open
      65534                 nsfnobody (special NFS user used for access to remote files)


    - For regular users, the UID and GID should be identical.  Since each user belongs to 
        their own group, files are not shared.

      Making files available to multiple users should be accomplished by secondary group
        memberships.  Files' group ownership should then be changed to the secondary group.



- The /etc/passwd File

    - We'll switch to root and check our uid and gid:

        # Root uid and gid
        $ su -
        $ id
        uid=0(root) gid=0(root) groups=0(root)

        # Look at information for student user
        $ id 1000
        uid=1000(student) gid=1000(student) groups=1000(student),5000(dev),5001(shared)


    - Now, we'll look at the /etc/passwd file itself:

        # File sorted on UID
        #   -t  Specifies field delimiter character
        #   -k  Specifies starting field (field 3, character 1)
        #   -g  Specifies general numeric sort
        $ cat /etc/passwd | sort -t: -k3.1 -g

        root:x:0:0:root:/root:/bin/bash
        bin:x:1:1:bin:/bin:/sbin/nologin
        daemon:x:2:2:daemon:/sbin:/sbin/nologin
        adm:x:3:4:adm:/var/adm:/sbin/nologin
        lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
        sync:x:5:0:sync:/sbin:/bin/sync
        shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
        halt:x:7:0:halt:/sbin:/sbin/halt
        mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
        operator:x:11:0:operator:/root:/sbin/nologin
        games:x:12:100:games:/usr/games:/sbin/nologin
        ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
        ...
        student:x:1000:1000:Student User:/home/student:/bin/bash
        student1:x:1001:1001:Student1:/home/student1:/bin/bash
        student2:x:1002:1002:Student User 2:/home/student2:/bin/bash
        nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin


    - For an example of the fields in each entry:

        student:x:1000:1000:Student User:/home/student:/bin/bash


        Field   Field Name       Value          Description
        ----------------------------------------------------------------------
        1       Account name     student        User login name for account
        2       Password         x              No longer used for pws, here for backwards comp
        3       UID              1000           User id for account
        4       GID              1000           Group id for account
        5       GECOS            student        Text field with description
        6       Home directory   /home/student  Home directory for user
        7       Shell            /bin/bash      Default shell for user


    - Storing passwords in account entries is no longer done, since this file needs to be
        accessible for all user accounts.  For this reason, passwords were long ago moved
        to the /etc/shadow file.  



- Nologin Shells

    - Many of the system users in the /etc/passwd file has a nologin shell, /sbin/nologin.
        This is a small shell that does not allow a login of any type.  

      This is a security feature, as it prevents hackers from accessing a system by 
        escalating privileges beyond these accounts.



- The /etc/shadow File

    - Passwords are stored in /etc/shadow.  This file is more secure, since it is 
        readable only by root and system processes that run with the root user id.


    - To look at the /etc/shadow file:

        root:$6$/VoB.UfR5MtuBi7b$Wnf7nLT/.EFz4W4lA0GFRk7yIuh/    2pnKbNBbhz9n./y.::0:99999:7:::
        bin:∗:17725:0:99999:7:::
        daemon:∗:17725:0:99999:7:::
        adm:∗:17725:0:99999:7:::
        lp:∗:17725:0:99999:7:::
        sync:∗:17725:0:99999:7:::
        <snip>
        sshd:!!:17833::::::
        vboxadd:!!:17833::::::
        dnsmasq:!!:17833::::::
        tcpdump:!!:17833::::::
        student:$6$81UxQUSj8Bs/rvyq5j3q/ BUG9SaAz.mAb8eW.nXewOoWJx4czjIMay6zbDKq0::0:99999:7:::


    - For an example of the fields in each entry:

        student:$6$81UxQUSOXI<snip>::0:99999:7:::


        Field   Field Name          Value                 Description
        ----------------------------------------------------------------------
        1       Account name        student               The user login name for the account
        2       Password            $6$81UxQUSOXI<snip>   Encrypted password (aka hash)
        3       Last change date    Empty                 Date of last pw change in days
        4       Minimum pw age      0                     # of days user must wait before changing pw
        5       Maximum pw age      99999                 # of days pw will remain valid
        6       Warning period      7                     # of days left until pw expires
        7       Inactivity period   Empty                 # of days after expiration pw is accepted
        8       Acct expiration     Empty                 # of days after which acct will expire
        9       Reserved            Empty                 Reserved for future use


    - If the encrypted password starts with a !, the account is locked.


    - Here are examples of working with passwords:

        # Change password for current user
        $ passwd

        # Change password of another user (as root)
        $ passwd student



- The /etc/group File

    - The /etc/group file contains a list of all of the groups on the localhost.  This includes
        standard system groups and groups created by the SysAdmin.  

        # Create a group
        $ groupadd -g 5000 dev

        # Add a user to the group
        $ usermod -G 5000 student


    - Taking a look at the /etc/group file:

        $ cat /etc/group
        ...
        ssl-cert:x:110:postgres
        ...


        Field   Field Name          Value                 Description
        ----------------------------------------------------------------------
        1       Group Name          ssl-cert              Name of the group
        2       Password            Empty                 Password for group (not normally used)
        3       GID                 110                   Group id
        4       Group List          postgres              List of user names of members of group        



- The /etc/login.defs File

    - The /etc/login.des file is used to set certain default config items that are incorporated
        when adding new users.  

      The values in this file include the starting and maximum UIDs and GIDs for new users, the
        default mail directory location, and the default pw expiration options.


        # View config for new user creation
        $ cat /etc/login.defs

        PASS_MIN_LEN: 5           # Minimum pw length
        PASS_MAX_DAYS: 99999      # Pw never expires



- Account Configuration Files

    - All user shell config files that are located in the /etc/skel directory, such as
        ~/.bash_profile and ~/.bashrc, are copied into the new account home directory
        whenever a new user is created.



- Password Security

    - It is a good security precaution for all users to change their passwords once a month.
        If someone discovers it, they won't be able to use it for that long.


    - Passwords should be protected and never written down.


    - It is a best practice to require a pw of 8+ characters, and to make it include an 
        uppercase, lowercase, number, and special character.  Such passwords would take over
        325K years to crack given current computing power.

      Note that if you make them any longer, people will definitely write them down on post-it
        notes.



- Password Encryption

    - Passwords cannot be stored in plain text, as that would lead to incredibly easy hacking.
        In order to keep user accounts secure, passwords are encrypted using the OpenSSL
        encryption libraries.


    - The 'openssl passwd' command-line utility allows encryption of a plain-text string into 
        an encrypted password.  By default, this will truncate the password to 8 characters
        and use the 'crypt' library, which is not that secure.

        # Encrypt a password
        $ openssl passwd mypasswd

        Warning: truncating password to 8 characters
        Gvp.W6K7c5FJc


    - Now, if we look at the encrypted password in /etc/shadow, we can see that it is much longer:

        student:$6$wVc137Z/fbPCOdrK$VhTwe4ooOxVrYWiZp3Z1mHDSpEBGopGjTho6Odj0YEbzkSNLeoSc5k7njmq
        dSYbLadnkBqCQcXHxLF.f42sG..:18046:0:99999:7:::

      We can see from the beginning '$6$' that this password was created usig the SHA512 algorithm.
        To create passwords using SHA512, we use the -6 option:

        # Encrypt with SHA512
        $ openssl passwd -6 mypassword

      Other options include SHA256 (-5), apr1, MD5, and crypt.


    - If we run the previous command a few times:

        # Run this a few times
        $ openssl passwd -6 mypassword

      We'll see that we get a different encrypted password each time.  This is because the
        password encryption algorithms use a different random seed for each iteration.  This
        is called the 'salt'.  


    - Normally, the salt is taken from /dev/urandom.  But, we can pass in our own salt if we
        want:

        # Pass in a salt
        $ openssl passwd -salt 123456 -6 mypassword

        $6$123456$KKcK3jDXxN5TVYNLbMdEIjnfRjaSlbqj5X9bBgryaa4qLD04lrM9kswCpAZL
        27/WXlbsDQcJ8kBxPjcpips781

      Notice the salt is right after the hashing algotithm specifier:

        $6$123456$...


    - If a hacker does gain access to the hash, which has the salt string specified, a brute
        force attack could be used to find the plain text that generated the hash.  This could
        take anywhere from not-very-long to years, depending on the strength of the password.



- Generating Good Passwords

    - The 'pwgen' utility is useful for creating good passwords.

        # Generates 160 random 8-character pws with upper/lower/numeric
        $ pwgen

        Iiqu4ahY Eeshu1ei raeZoo8o ahj6Sei3 Moo5ohTu ieGh6eit Is0Eisae eiVo5Ohv
        Gooqu5ji ieX9VoN5 aiy3kiSo Iphaex4e Vait1thu oi5ruaPh eL7Mohch iel2Aih6
        ...


    - Whenever the data stream of pwgen is sent through a pipe, only a single password is 
        returned.  This is much more useful in automation scripts.

        # Generate a single pw
        $ pwgen | sort
        Eaphui7K

        # Generate a desired number of pws
        $ pwgen -N 6 | sort
        boot6Ahr
        Die2thah
        nohSoh1T
        reob9eiR
        shahXoL6
        Wai6aiph

        # Generate 10 25-character pws
        $ pwgen 25 10


        # -s option generates more random, difficult to remember passwords
        # -y option includes special characters
        $ pwgen -sy 25 10



- Password Quality

    - The /etc/security/pwquality.conf file is used to define the quality requirements of
        new passwords.  



- Creating New Accounts with the useradd Command

    - Note that the 'adduser' command can also be used, and is just a sym link to 'useradd'.
        It is retained for backwards compatibility.

    
    - The 'useradd' command is flexible, and allows new users to get defaults for things
        like pw expiration and the default shell.

        # View defaults for new users
        $ cat /etc/default/useradd

        # useradd defaults file
        GROUP=100
        HOME=/home
        INACTIVE=-1
        EXPIRE=
        SHELL=/bin/bash
        SKEL=/etc/skel
        CREATE_MAIL_SPOOL=yes


    - Now, we can add a user using the default settings:

        # -c option will set GECOS comment for new user
        $ useradd -c "Test User 1" tuser1


    - We can also override the default options:

        # Specify a different home directory and default shell
        $ useradd -c "Test User 1" -d /TestFS/tuser1 -s /usr/bin/zsh tuser1

        # Specify pw expiration date
        $ useradd -c "Test User 1" -e 2019-05-08 tuser1


    - We can use the 'usermod' command to change attributies about the user:

        # Change pw expiration date
        $ usermod -e 2019-06-05 tuser1


    - We can use the 'openssl passwd' command to generate an encrypted password for a new 
        account:

        # Create a user with an encrypted password
        $ useradd -c "Test User 4" -p `openssl passwd -salt 123456 -6 mypassword` tuser4



- Creating New Accounts by Editing the Files

    - We can add new users by editing the files directly also.  To start, we add the new user
        to /etc/passwd, etc/group, and etc/shadow.

        # Add line to /etc/passwd
        tuser5:x:1007:1007:Test User 5:/home/tuser5:/bin/bash

        # Add line to etc/group
        tuser5:x:1007:

        # Add to /etc/shadow (generated with 'openssl passwd' command)
        tuser5:$6$123456$KKcK3jDXxN5TVYNLbMdEIjnfRjaSlbqj5X9bBgryaa4qLD04lrM9kswCpAZL27/WXlb
        sDQcJ8kBxPjcpips781:18044:0:99999:7:::


    - Now, create a home directory for the new user.

        # Create new home directory
        $ cd /home ; mkdir tuser5

        # Set the home directory permisions to 700
        $ chmod 700 tuser5

        # Copy the files from /etc/skel into the new home directory
        $ cp -r /etc/skel/.[a-z*] /home/tuser5


    - Now, set the ownership of the directory and its contents to the new user.

        # Set ownerships
        $ chown -R tuser5.tuser5 tuser5


    - Now, we can switch to the new user account.

        # Switch to new user account
        $ su - tuser5
        Password: mypassword



- Locking the Password

    - If one of your users is going to be away from work for a while, it may be smart to lock
        their account.  This doesn't change their password in /etc/shadow, so the account can
        be unlocked when they come back and they can resume using their password.

        # Lock account
        $ passwd -l tuser5


        # Now, we see that their password in /etc/shadow begins with !!, indicating the lock
        $ grep user5 /etc/shadow

        tuser5:!!$6$123456$KKcK3jDXxN5TVYNLbMdEIjnfRjaSlbqj5X9bBgryaa4qLD04lrM9kswCpAZL2
        7/WXlbsDQcJ8kBxPjcpips781:18044:0:99999:7:::


        # Unlock the account
        $ passwd -u tuser5



- Deleting User Accounts

    - Depending on the reason for an account being deleted, we can retain the user's home
        directory or delete it.

        # Delete a user but leave home directory
        $ userdel tuser3

        # Delete a user and their home directory
        $ userdel -r tuser4



- Forcing Account Logoff

    - Sometimes, it may become necessary to force users to log off.  Maybe they left the
        organization, the system needs to be updated with no users logged in, or maybe
        the users owns runaway processes.

        # Locate the running pids that belong to a user account
        $ pgrep -U student1

        # Kill all of these processes to force the user off the system
        $ pkill -KILL -U student1

        # Verify that all processes have been killed
        $ pgrep -U student1



- Setting Resource Limits

    - The /etc/security/limits.conf file can be used to set limits on the amount that 
        a user, users, or groups can consume.  


    - There are soft or hard limits that can be set.  A soft limit sends a message when a 
        limit has been met or exceeded.  A hard limit prevents completion of the command
        that caused it.

      The limits set in the limits.conf file are monitored and enforced by the PAM (Pluggable
        Authentication Modules) system.  